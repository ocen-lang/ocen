//* Bindings to libc functions

// stdlib
[extern] def malloc(size: u32): untyped_ptr
[extern] def realloc(old: untyped_ptr, size: u32): untyped_ptr
[extern] def calloc(size: u32, elem_size: u32): untyped_ptr
[extern] def free(ptr: untyped_ptr)
[extern] def getenv(name: str): str
[extern] def system(cmd: str): i32

[extern] [exits] def exit(code: i32)

// string
[extern] def strcmp(a: str, b: str): i32
[extern] def strlen(s: str): u32
[extern] def strcpy(dst: str, src: str): str
[extern] def strcat(dst: str, src: str): str
[extern] def strstr(haystack: str, needle: str): str
[extern] def strchr(s: str, c: i32): str
[extern] def strsep(str: &str, delim: str): str
[extern] def strerror(errnum: i32): str
[extern] def memcpy(dest: untyped_ptr, src: untyped_ptr, size: u32)
[extern] def memcmp(s: untyped_ptr, other: untyped_ptr, n: u32): i32
[extern] def memset(dest: untyped_ptr, c: u8, size: u32)

// ctype
@compiler c_include "ctype.h"
[extern] def isdigit(c: char): bool
[extern] def isxdigit(c: char): bool
[extern] def isalpha(c: char): bool
[extern] def isalnum(c: char): bool
[extern] def isprint(c: char): bool
[extern] def isspace(c: char): bool

[extern] def strtoll(s: str, endptr: &str, base: i32 = 10): i64
[extern] def strtol(s: str, endptr: &str, base: i32 = 10): i32
[extern] def strtoul(s: str, endptr: &str, base: i32 = 10): u64
[extern] def strtof(s: str, endptr: &str): f32
[extern] def strtod(s: str, endptr: &str): f64

// unistd.h
@compiler c_include "sys/types.h"
@compiler c_include "sys/wait.h"
@compiler c_include "unistd.h"

[extern] def pipe(fds: &i32): i32
[extern] def fork(): i32
[extern] def dup2(a: i32, b: i32): i32
[extern] def close(a: i32): i32
[extern] def execvp(a: str, b: &str): i32
[extern] def waitpid(a: i32, b: &i32, c: i32): i32
[extern] def write(a: i32, b: &u32, c: u32): i32

// macros
[extern] const STDIN_FILENO: i32
[extern] def WEXITSTATUS(a: i32): i32
[extern] def WTERMSIG(a: i32): i32
[extern] def WIFEXITED(a: i32): bool
[extern] def WIFSIGNALED(a: i32): bool

// errno
@compiler c_include "errno.h"

[extern] const errno: i32
def get_err(): str => strerror(errno) as str