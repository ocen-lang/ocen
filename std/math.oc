//! Common math functions

@compiler c_flag "-lm"
@compiler c_include "math.h"

[extern "sqrtf"] def f32::sqrt(this): f32
[extern "cosf"] def f32::cos(this): f32
[extern "sinf"] def f32::sin(this): f32
[extern "tanf"] def f32::tan(this): f32
[extern "atan2f"] def f32::atan2(this, y: f32): f32
[extern "logf"] def f32::log(this): f32
[extern "log2f"] def f32::log2(this): f32
[extern "ceilf"] def f32::ceil(this): f32
[extern "floorf"] def f32::floor(this): f32

[extern "sqrt"] def f64::sqrt(this): f64
[extern "cos"] def f64::cos(this): f64
[extern "sin"] def f64::sin(this): f64
[extern "tan"] def f64::tan(this): f64
[extern "atan2"] def f64::atan2(this, y: f64): f64
[extern "log"] def f64::log(this): f64
[extern "log2"] def f64::log2(this): f64
[extern "ceil"] def f64::ceil(this): f64
[extern "floor"] def f64::floor(this): f64


[extern "fabsf"] def f32::abs(this): f32
[extern "fabs"] def f64::abs(this): f64
[extern "rand"] def randint(): i32
[extern "drand48"] def rand01(): f32

def f32::min(this, b: f32): f32 => if this < b then this else b
def f32::max(this, b: f32): f32 => if this > b then this else b

def f32::clamp(this, min: f32, max: f32): f32 => f32::max(f32::min(this, max), min)
def f32::clamp01(this): f32 => this.clamp(0.0, 1.0)

def f32::is_close(this, other: f32, thresh: f32 = 0.0001): bool => (this - other).abs() < thresh
def f64::is_close(this, other: f64, thresh: f64 = 0.0001): bool => (this - other).abs() < thresh

def i8::abs(this): i8 => if this < 0 then -this else this
def i16::abs(this): i16 => if this < 0 then -this else this
def i32::abs(this): i32 => if this < 0 then -this else this
def i64::abs(this): i64 => if this < 0 then -this else this

[extern "M_PI"] const PI: f32
const TAU: f32 = PI * 2.0

def degrees(radians: f32): f32 { return radians * 180.0 / PI; }
def radians(degrees: f32): f32 { return degrees * PI / 180.0; }
