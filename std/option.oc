import std::result::{ Result }

enum Option<T> {
    // NOTE: The names of these fields are hardcoded in the compiler
    //       and must not be changed without updating the corresponding
    //       methods in the compiler. (typechecker.oc)
    None
    Some(val: T),
}

def Option::unwrap_or(this, defolt: T): T => match this {
    Some(val) => val
    None => defolt
}

def Option::is_none(this): bool => match this {
    Some => false
    None => true
}
def Option::is_some(this): bool => not .is_none()

// TODO: Template methods don't work, so can't have a generic error type
//       Use Result::from_option instead
def Option::into_result(this, msg: str): Result<T, str> => match this {
    Some(val) => Ok(val)
    None => Error(msg)
}

