// Type representing a dynamic list of objects.
//
// Due to no generics being available, this is NOT type-safe, but rather
// stored a list of `untyped_ptr`. When pushing / popping an object,
// manually cast to the correct type.
import std::libc::{calloc, realloc, free}


struct OldVector {
    size: u32
    capacity: u32
    data: &untyped_ptr
}

def OldVector::new(capacity: u32 = 16): &OldVector {
    let vec = calloc(1, sizeof(OldVector)) as &OldVector
    vec.size = 0
    vec.capacity = capacity
    vec.data = calloc(vec.capacity, sizeof(untyped_ptr)) as &untyped_ptr
    return vec
}

def OldVector::resize(&this, new_capacity: u32) {
    .capacity = new_capacity
    .data = realloc(.data ,
                    .capacity * sizeof(untyped_ptr)) as &untyped_ptr
}

def OldVector::push(&this, val: untyped_ptr) {
    if .size == .capacity {
        .resize(.capacity * 2)
    }
    .data[.size] = val
    .size += 1
}

def OldVector::push_front(&this, val: untyped_ptr) {
    if .size == .capacity {
        .resize(.capacity * 2)
    }
    for let i = .size; i > 0; i -= 1 {
        .data[i] = .data[i - 1]
    }
    .data[0] = val
    .size += 1
}

def OldVector::pop(&this): untyped_ptr {
    if .size == 0 then panic("pop on empty vector")
    .size -= 1
    return .data[.size]
}

def OldVector::back(&this): untyped_ptr {
    if .size == 0 then panic("back on empty vector")
    return .data[.size - 1]
}

def OldVector::at(&this, i: u32): untyped_ptr {
    if i < 0 or i >= .size {
        panic("at out of bounds in vector")
    }
    return .data[i]
}

def OldVector::empty(&this): bool => .size == 0

def OldVector::free(&this) {
    free(.data)
    free(this)
}

struct Vector<T> {
    data: &T
    size: u32
    capacity: u32
}

def Vector::new(capacity: u32 = 16): &Vector<T> {
    let list = calloc(1, sizeof(Vector<T>)) as &Vector<T>
    list.capacity = capacity
    list.data = calloc(capacity, sizeof(T)) as &T
    list.size = 0
    return list
}

def Vector::resize(&this, new_capacity: u32) {
    .capacity = new_capacity
    .data = realloc(.data , .capacity * sizeof(T)) as &T
}

def Vector::push(&this, value: T) {
    if .size == .capacity {
        .resize(.capacity * 2)
    }
    .data[.size] = value
    .size += 1
}

def Vector::push_front(&this, value: T) {
    if .size == .capacity {
        .resize(.capacity * 2)
    }
    for let i = .size; i > 0; i -= 1 {
        .data[i] = .data[i - 1]
    }
    .data[0] = value
    .size += 1
}

def Vector::pop(&this): T {
    assert .size > 0, "Empty vector in Vector::pop"
    .size -= 1
    return .data[.size]
}

def Vector::back(&this): T {
    assert .size > 0, "Empty vector in Vector::back"
    return .data[.size - 1]
}

def Vector::at(&this, i: u32): T {
    assert i < .size, "Out of bounds in Vector::at"
    return .data[i]
}

def Vector::empty(&this): bool {
    return .size == 0
}

def Vector::is_empty(&this): bool => .size == 0

def Vector::free(&this) {
    free(.data)
    free(this)
}