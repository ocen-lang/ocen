// A dynbamic list of objects

import std::libc::{calloc, realloc, free}


struct Vector<T> {
    data: &T
    size: u32
    capacity: u32
}

def Vector::new(capacity: u32 = 16): &Vector<T> {
    let list = calloc(1, sizeof(Vector<T>)) as &Vector<T>
    list.capacity = capacity
    list.data = calloc(capacity, sizeof(T)) as &T
    list.size = 0
    return list
}

def Vector::resize(&this, new_capacity: u32) {
    .capacity = new_capacity
    .data = realloc(.data , .capacity * sizeof(T)) as &T
}

def Vector::push(&this, value: T) {
    if .size == .capacity {
        .resize(.capacity * 2)
    }
    .data[.size] = value
    .size += 1
}

def Vector::push_front(&this, value: T) {
    if .size == .capacity {
        .resize(.capacity * 2)
    }
    for let i = .size; i > 0; i -= 1 {
        .data[i] = .data[i - 1]
    }
    .data[0] = value
    .size += 1
}

def Vector::pop(&this): T {
    assert .size > 0, "Empty vector in Vector::pop"
    .size -= 1
    return .data[.size]
}

def Vector::extend(&this, other: &Vector<T>) {
    for val : other.iter() {
        .push(val)
    }
}

def Vector::back(&this): T {
    assert .size > 0, "Empty vector in Vector::back"
    return .data[.size - 1]
}

def Vector::at(&this, i: u32): T {
    assert i < .size, "Out of bounds in Vector::at"
    return .data[i]
}

def Vector::clear(&this) {
    .size = 0
}

def Vector::is_empty(&this): bool => .size == 0

def Vector::iter(&this): Iterator<T> => Iterator<T>::make(this)

def Vector::free(&this) {
    free(.data)
    free(this)
}

struct Iterator<T> {
    vec: &Vector<T>
    index: u32
}

def Iterator::make(vec: &Vector<T>): Iterator<T> => Iterator<T>(vec, 0)

def Iterator::has_value(&this): bool => .index < .vec.size

def Iterator::next(&this) {
    assert .index < .vec.size, "Out of bounds in Iterator::next"
    .index += 1
}

def Iterator::cur(&this): T {
    assert .index < .vec.size, "Out of bounds in Iterator::current"
    return .vec.data[.index]
}