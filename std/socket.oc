//! Bindings to the C socket library

import std::buffer::Buffer
import std::libc::{ exit, strerror }
import std::fcntl
import std::time::{ TimeVal }

struct Socket {
    fd: i32
}

enum SocketMode {
    UDP
    TCP
}

enum SocketStatus {
    Ok
    CreateError
    HostError
    InetPtonError
    ConnectError
}

def Socket::try_connect(host: str, port: i32, mode: SocketMode, out_sock: &Socket, timeout_secs: i32 = -1): SocketStatus {
    let sock: Socket

	// Creating socket
	sock.fd = match mode {
        UDP => socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP),
        TCP => socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
    }
	if (sock.fd < 0) {
        return CreateError
	}

	// Adding server address info. to struct
	let server_address: SockAddrIn
	server_address.sin_family = AF_INET;
	server_address.sin_port = htons(port);

    let hostm = gethostbyname(host)
    if not hostm? or not hostm.h_addr? {
        return HostError
    }
    server_address.sin_addr.s_addr = *(hostm.h_addr as &i32)

	// Assigning IP address to struct
	if (inet_pton(AF_INET, host, &server_address.sin_addr) < 0) {
        return InetPtonError
  	}

    let should_timeout = (timeout_secs > 0)
    let set: fcntl::FdSet

    if should_timeout {
        // Setting the socket to non-blocking
        set.zero()
        set.set(sock.fd)
        fcntl::fcntl(sock.fd, fcntl::F_SETFL, fcntl::O_NONBLOCK)
    }

    // Connecting to the socket
  	if (connect(sock.fd, (&server_address) as &SockAddr, sizeof(SockAddrIn)) < 0) {
        if should_timeout and errno != fcntl::EINPROGRESS {
            return ConnectError
        }
    }

    if should_timeout {
        let timeout: TimeVal
        timeout.tv_sec = timeout_secs as i64;
        timeout.tv_usec = 0;

        let ret = fcntl::select(sock.fd + 1, null, &set, null, &timeout);
        if (ret <= 0) {
            return ConnectError
        }

        // After connecting
        let flags = fcntl::fcntl(sock.fd, fcntl::F_GETFL, 0);
        fcntl::fcntl(sock.fd, fcntl::F_SETFL, flags & ~fcntl::O_NONBLOCK);
    }

    *out_sock = sock
    return Ok
}

def Socket::connect(host: str, port: i32, mode: SocketMode, timeout_secs: i32 = -1): Socket {
    let sock: Socket
    let res = Socket::try_connect(host, port, mode, &sock, timeout_secs)
    match res {
        Ok => {}
        CreateError => std::panic(f"Error creating socket: {strerror(errno)}")
        HostError => std::panic(f"Error getting host by name: {strerror(errno)}: ({host})")
        InetPtonError => std::panic(f"Error converting host to IP address: {strerror(errno)}: ({host})")
        ConnectError => std::panic(f"Error connecting to host: {strerror(errno)}")
    }
    return sock
}

def Socket::read(&this, buf: &Buffer, max_size: u32): u32 {
    buf.resize_if_necessary(max_size)
    buf.size = read(this.fd, buf.data, max_size)
    return buf.size
}

def Socket::read_exactly(&this, buf: &Buffer, size: u32): u32 {
    buf.resize_if_necessary(size)
    buf.size = 0
    while size > 0 {
        let n = read(this.fd, buf.data + buf.size, size)
        if n < 0 {
            println(`Error reading from socket: {strerror(errno)}`)
            return -1
        }
        buf.size += n
        size -= n
    }
    return buf.size
}

def Socket::write(&this, buf: &Buffer): u32 => write(this.fd, buf.data, buf.size)


/// Internal stuff

@compiler c_include "sys/socket.h"
@compiler c_include "netinet/in.h"
@compiler c_include "arpa/inet.h"
@compiler c_include "unistd.h"
@compiler c_include "errno.h"
@compiler c_include "sys/types.h"
@compiler c_include "time.h"
@compiler c_include "netdb.h"

[extern "struct sockaddr"] struct SockAddr

[extern "struct hostent"]
struct HostEnt {
    h_addr: &u8 // this type is a lie
}

[extern "struct in_addr"]
struct SinAddr {
    s_addr: i32
}

[extern "struct sockaddr_in"]
struct SockAddrIn {
    sin_family: i32
    sin_port: i32
    sin_addr: SinAddr
}

[extern] def htons(val: i32): i32
[extern] def htonl(val: i32): i32

[extern] let errno: i32
[extern] let AF_INET: i32
[extern] let SOCK_STREAM: i32
[extern] let INADDR_ANY: i32
[extern] let IPPROTO_UDP: i32
[extern] let IPPROTO_TCP: i32
[extern] let SOCK_DGRAM: i32

[extern] def socket(domain: i32, type: i32, protocol: i32): i32
[extern] def bind(sockfd: i32, addr: &SockAddr, addrlen: i32): i32
[extern] def listen(sockfd: i32, backlog: i32): i32
[extern] def accept(sockfd: i32, addr: &SockAddr, addrlen: &i32): i32
[extern] def inet_pton(af: i32, src: str, dst: untyped_ptr): i32
[extern] def connect(sockfd: i32, addr: &SockAddr, addrlen: u32): i32
[extern] def gethostbyname(name: str): &HostEnt

[extern] def read(fd: i32, buf: untyped_ptr, count: u32): u32
[extern] def write(fd: i32, buf: untyped_ptr, count: u32): u32
[extern] def close(fd: i32): i32