//* Wrapper for doing binary IO on a {{Buffer}}.
//*
//* This is a very thin wrapper around a {{Buffer}}, and gives you a
//* simple bunch of methods for reading and writing integers
//* and bytes of different sizes in different endiannesses.

import std::buffer::Buffer
import std::sv::SV
import std::Endian

struct BufferIO {
    data: &Buffer
    index: u32
}

def BufferIO::make(data: &Buffer): BufferIO {
    return BufferIO(
        data: data,
        index: 0,
    )
}

//* Read a signed 64-bit integer with the given endianness
def BufferIO::read_i64(&this, endian: Endian = Little): i64 { return .read_u64(endian) as i64 }
//* Read an unsigned 64-bit integer with the given endianness
def BufferIO::read_u64(&this, endian: Endian = Little): u64 {
    let value = 0u64
    for let i = 0; i < 8; i += 1 {
        let shift = if endian == Little then i else 7 - i
        value = value | .data.data[.index + i] as u64 << (56u64 - shift as u64 * 8)
    }
    .index += 8
    return value as u64
}

//* Read a signed 32-bit integer with the given endianness
def BufferIO::read_i32(&this, endian: Endian = Little): i32 { return .read_u32(endian) as i32 }
//* Read an unsigned 32-bit integer with the given endianness
def BufferIO::read_u32(&this, endian: Endian = Little): u32 {
    let value = 0
    for let i = 0; i < 4; i += 1 {
        let shift = if endian == Little then i else 3 - i
        value = value | .data.data[.index + i] as u32 << (24u32 - shift * 8)
    }
    .index += 4
    return value
}

//* Read a signed 16-bit integer with the given endianness
def BufferIO::read_i16(&this, endian: Endian = Little): i16 { return .read_u16(endian) as i16 }
//* Read an unsigned 16-bit integer with the given endianness
def BufferIO::read_u16(&this, endian: Endian = Little): u16 {
    let value = 0u16
    for let i = 0; i < 2; i += 1 {
        let shift = if endian == Little then i else 1 - i
        value = value | .data.data[.index + i] as u16 << (8u16 - shift as u16 * 8)
    }
    .index += 2
    return value as u16
}


//* Read a signed 8-bit integer
def BufferIO::read_i8(&this): i8 { return .read_u8() as i8 }
//* Read an unsigned 8-bit integer
def BufferIO::read_u8(&this): u8 {
    let value = .data.data[.index]
    .index += 1
    return value
}


//* Read `count` bytes from the buffer.
def BufferIO::read_bytes(&this, _dst: untyped_ptr, count: u32) {
    let dst = _dst as &u8
    if dst? {
        for let i = 0; i < count; i += 1 {
            dst[i] = .data.data[.index as u32 + i]
        }
    }
    .index += count
}

//* Read `count` bytes from the buffer and return them as a view
def BufferIO::read_bytes_sv(&this, count: u32): SV {
    let sv = SV((.data.data + .index) as str, count)
    .index += count
    return sv
}

//* Write a signed 64-bit integer with the given endianness
def BufferIO::write_i64(&this, value: i64, endian: Endian = Little) { .write_u64(value as u64, endian) }
//* Write an unsigned 64-bit integer with the given endianness
def BufferIO::write_u64(&this, value: u64, endian: Endian = Little) {
    .data.resize_if_necessary(.data.size + 8)
    for let i = 0; i < 8; i += 1 {
        let shift = if endian == Little then i else 7 - i
        .data.data[.data.size + i] = ((value >> (56u64 - shift as u64 * 8)) & 0xff) as u8
    }
    .data.size += 8
}

//* Write a signed 32-bit integer with the given endianness
def BufferIO::write_i32(&this, value: i32, endian: Endian = Little) { .write_u32(value as u32, endian) }
//* Write an unsigned 32-bit integer with the given endianness
def BufferIO::write_u32(&this, value: u32, endian: Endian = Little) {
    .data.resize_if_necessary(.data.size + 4)
    for let i = 0; i < 4; i += 1 {
        let shift = if endian == Little then i else 3 - i
        .data.data[.data.size + i] = ((value >> (24u32 - shift * 8)) & 0xff) as u8
    }
    .data.size += 4
}

//* Write a signed 16-bit integer with the given endianness
def BufferIO::write_i16(&this, value: i16, endian: Endian = Little) { .write_u16(value as u16, endian) }
//* Write an unsigned 16-bit integer with the given endianness
def BufferIO::write_u16(&this, value: u16, endian: Endian = Little) {
    .data.resize_if_necessary(.data.size + 2)
    for let i = 0; i < 2; i += 1 {
        let shift = if endian == Little then i else 1 - i
        .data.data[.data.size + i] = ((value >> (8u16 - shift as u16 * 8)) & 0xff) as u8
    }
    .data.size += 2
}

//* Write a signed 8-bit integer with the given endianness
def BufferIO::write_i8(&this, value: i8) { .write_u8(value as u8) }
//* Write an unsigned 8-bit integer with the given endianness
def BufferIO::write_u8(&this, value: u8) {
    .data.resize_if_necessary(.data.size + 1)
    .data.data[.data.size] = value
    .data.size += 1
}

//* Write `count` bytes to the buffer.
def BufferIO::write_bytes(&this, _src: untyped_ptr, count: u32) {
    let src = _src as &u8
    .data.resize_if_necessary(.data.size as u32 + count as u32)
    for let i = 0; i < count; i += 1 {
        .data.data[.data.size + i] = src[i]
    }
    .data.size += count
}

//* Returns if the buffer is empty.
def BufferIO::is_empty(&this): bool => .index >= .data.size