//! SDL implementation for displaying video frames.

import std::sdl
import std::image::{Image, Color}

struct SDLContext {
    window: &sdl::Window
    renderer: &sdl::Renderer
    buffer: &sdl::Texture
    orig_width: u32
    orig_height: u32

    frame_time: u32
    last_frame: i32
    paused: bool
}

def SDLContext::create(width: u32, height: u32, fps: u32): &SDLContext {
    let ctx = std::new<SDLContext>()
    sdl::init(sdl::INIT_EVERYTHING)
    sdl::create_window_renderer(width as i32, height as i32, 0, &ctx.window, &ctx.renderer)
    assert ctx.window?, "Failed to create window"
    assert ctx.renderer?, "Failed to create renderer"

    ctx.renderer.set_draw_color(0, 0, 0, 255)
    ctx.renderer.clear()
    ctx.renderer.present()

    ctx.orig_width = width
    ctx.orig_height = height
    ctx.buffer = ctx.renderer.create_texture(
        sdl::PIXELFORMAT_ABGR8888,
        sdl::TEXTUREACCESS_STREAMING,
        width as i32,
        height as i32
    )
    assert ctx.buffer?, "Failed to create buffer"

    ctx.frame_time = 1000 / fps
    ctx.last_frame = sdl::get_ticks()
    ctx.paused = false
    return ctx
}

def SDLContext::finish(&this) {
    .renderer.destroy()
    .window.destroy()
    sdl::quit()
    std::exit(0)
}

def SDLContext::send_frame(&this, img: &Image) {
    let e: sdl::Event
    let quit = false

    let first = true
    while (.paused or first) and not quit {
        first = false
        while sdl::poll_event(&e) {
            match e.type {
                Quit => {
                    println("[+] Got a quit event in SDL, exiting...")
                    quit = true
                }
                KeyDown => {
                    match e.key.keysym.scancode {
                        Q | Escape => quit = true
                        Space => .paused = not .paused
                        else => {}
                    }
                }
                else => {}
            }
        }
    }
    if quit then .finish()

    let current_tick = sdl::get_ticks()
    let elapsed = current_tick - .last_frame
    if elapsed < .frame_time as i32 {
        sdl::delay(.frame_time as i32 - elapsed)
    }

    let data: &u8
    let i_pitch = 0i32
    .buffer.lock(null, (&data) as &untyped_ptr, &i_pitch)

    assert i_pitch > 0
    let pitch = i_pitch as u32

    let x_padding = .orig_width - img.width;
    let y_padding = .orig_height - img.height;
    for let y = 0; y < y_padding/2; ++y {
        let off = y * pitch
        for let x = 0; x < .orig_width; ++x {
            data[off + 3] = 255 as u8
            off += 4
        }
    }
    for let y = 0; y < img.height; ++y  {
        let out_x = x_padding/2
        for let x = 0; x < img.width; ++x {
            let col = img.get(x, y);
            let off = (y+y_padding/2) * pitch + out_x * 4
            data[off + 0] = col.r
            data[off + 1] = col.g
            data[off + 2] = col.b
            data[off + 3] = 255 as u8
            ++out_x;
        }
    }

    .buffer.unlock()
    .renderer.copy(.buffer, null, null)
    .renderer.present()
    .last_frame = sdl::get_ticks()
}

def SDLContext::wait_for_quit(&this) {
    let quit = false
    while not quit {
        let e: sdl::Event
        while sdl::poll_event(&e) {
            match e.type {
                Quit => quit = true
                KeyDown => {
                    match e.key.keysym.scancode {
                        Q | Escape => quit = true
                        else => {}
                    }
                }
                else => {}
            }
        }
    }
}