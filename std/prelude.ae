import .libc

struct File extern("FILE")

def File::open(path: str, mode: str): &File {
    let file = libc::fopen(path, mode)
    if not file? {
        panic(`failed to open file: {path}`)
    }
    return file
}

def File::close(&this) extern("fclose")

def File::read(&this, buf: untyped_ptr, size: i32): i32 {
    return libc::fread(buf, 1, size, this)
}

def File::write(&this, buf: untyped_ptr, size: i32): i32 {
    return libc::fwrite(buf, 1, size, this)
}

def exit(code: i32) exits extern

def panic(msg: str) exits {
    println("%s", msg)
    exit(1)
}

def str::eq(this, other: str): bool => libc::strcmp(this, other) == 0
def str::len(this): i32 => libc::strlen(this)