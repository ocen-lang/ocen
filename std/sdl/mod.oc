//! Bindings to SDL2 and extensions

@compiler c_include "SDL2/SDL.h"
@compiler c_flag "-lSDL2"

[extern "SDL_Window"] struct Window
[extern "SDL_Renderer"] struct Renderer

[extern "SDL_Texture"] struct Texture
[extern "SDL_DestroyTexture"] def Texture::destroy(&this)

[extern "SDL_Rect"]
[formatting "Rect(%d, %d, %d, %d)" "$.x, $.y, $.w, $.h"]
struct Rect  {
    x: i32
    y: i32
    w: i32
    h: i32
}

[extern "SDL_Surface"]
struct Surface

[extern "SDL_FreeSurface"] def Surface::destroy(&this)

[extern "SDL_Color"]
[formatting "Color(%d, %d, %d, %d)" "$.r, $.g, $.b, $.a"]
struct Color  {
    r: i32 // Not really i32, but it's convenient
    g: i32
    b: i32
    a: i32
}

enum Key extern("SDL_Scancode") {
    A = extern("SDL_SCANCODE_A")
    B = extern("SDL_SCANCODE_B")
    C = extern("SDL_SCANCODE_C")
    D = extern("SDL_SCANCODE_D")
    E = extern("SDL_SCANCODE_E")
    F = extern("SDL_SCANCODE_F")
    G = extern("SDL_SCANCODE_G")
    H = extern("SDL_SCANCODE_H")
    I = extern("SDL_SCANCODE_I")
    J = extern("SDL_SCANCODE_J")
    K = extern("SDL_SCANCODE_K")
    L = extern("SDL_SCANCODE_L")
    M = extern("SDL_SCANCODE_M")
    N = extern("SDL_SCANCODE_N")
    O = extern("SDL_SCANCODE_O")
    P = extern("SDL_SCANCODE_P")
    Q = extern("SDL_SCANCODE_Q")
    R = extern("SDL_SCANCODE_R")
    S = extern("SDL_SCANCODE_S")
    T = extern("SDL_SCANCODE_T")
    U = extern("SDL_SCANCODE_U")
    V = extern("SDL_SCANCODE_V")
    W = extern("SDL_SCANCODE_W")
    X = extern("SDL_SCANCODE_X")
    Y = extern("SDL_SCANCODE_Y")
    Z = extern("SDL_SCANCODE_Z")

    Up = extern("SDL_SCANCODE_UP")
    Down = extern("SDL_SCANCODE_DOWN")
    Left = extern("SDL_SCANCODE_LEFT")
    Right = extern("SDL_SCANCODE_RIGHT")
    Space = extern("SDL_SCANCODE_SPACE")
    Escape = extern("SDL_SCANCODE_ESCAPE")
}

enum MouseButton extern("u8") {
    Left = extern("SDL_BUTTON_LEFT")
    Middle = extern("SDL_BUTTON_MIDDLE")
    Right = extern("SDL_BUTTON_RIGHT")
    Forward = extern("SDL_BUTTON_X1")
    Backward = extern("SDL_BUTTON_X2")
}

[extern "SDL_Keysym"]
struct Keysym {
    scancode: Key
    sym: Key
    mod: i32
}

enum EventType extern("SDL_EventType") {
    Quit = extern("SDL_QUIT")
    KeyDown = extern("SDL_KEYDOWN")
    KeyUp = extern("SDL_KEYUP")
    MouseDown = extern("SDL_MOUSEBUTTONDOWN")
    MouseUp = extern("SDL_MOUSEBUTTONUP")
    Wheel = extern("SDL_MOUSEWHEEL")
    Window = extern("SDL_WINDOWEVENT")
    User = extern("SDL_USEREVENT")
}

[extern "SDL_KeyboardEvent"]
struct KeyboardEvent {
    type: i32
    keysym: Keysym
}

[extern "SDL_MouseWheelEvent"]
struct MouseWheelEvent {
    type: i32
    x: i32
    y: i32
}

[extern "SDL_MouseButtonEvent"]
struct MouseButtonEvent {
    type: i32
    button: MouseButton
    state: i32
    x: i32
    y: i32
}

[extern "SDL_Event"]
struct Event {
    type: EventType
    key: KeyboardEvent
    wheel: MouseWheelEvent
    button: MouseButtonEvent
}

[extern "SDL_Scancode"]
struct Scancode

enum BlendMode extern("SDL_BlendMode") {
    None = extern("SDL_BLENDMODE_NONE")
    Blend = extern("SDL_BLENDMODE_BLEND")
    Add = extern("SDL_BLENDMODE_ADD")
    Mod = extern("SDL_BLENDMODE_MOD")
}

[extern "SDL_INIT_EVERYTHING"]         const INIT_EVERYTHING: i32
[extern "SDL_PIXELFORMAT_ABGR8888"]    const PIXELFORMAT_ABGR8888: i32
[extern "SDL_TEXTUREACCESS_STREAMING"] const TEXTUREACCESS_STREAMING: i32
[extern "SDL_WINDOW_RESIZABLE"]        const WINDOW_RESIZABLE: i32
[extern "SDL_WINDOWPOS_CENTERED"]      const WINDOWPOS_CENTERED: i32
[extern "SDL_WINDOW_RESIZABL"]         const WINDOW_RESIZABL: i32
[extern "SDL_RENDERER_ACCELERATED"]    const RENDERER_ACCELERATED: i32
[extern "SDL_NUM_SCANCODES"]           const NUM_SCANCODES: i32


[extern "SDL_Init"]                    def init(flags: i32): i32
[extern "SDL_Quit"]                    def quit()
[extern "SDL_GetError"]                def get_error(): str
[extern "SDL_Delay"]                   def delay(ms: i32)
[extern "SDL_GetTicks"]                def get_ticks(): i32
[extern "SDL_GetMouseState"]           def get_mouse_state(x: &i32, y: &i32): i32
[extern "SDL_GetRelativeMouseState"]   def get_relative_mouse_state(x: &i32, y: &i32): i32
[extern "SDL_ShowCursor"]              def show_cursor(toggle: bool)
[extern "SDL_CreateWindow"]            def create_window(title: str, x: i32, y: i32, w: i32, h: i32, flags: i32): &Window

[extern "SDL_CreateTextureFromSurface"] def Renderer::create_texture_from_surface(&this, surface: &Surface): &Texture
[extern "SDL_CreateWindowAndRenderer"]  def create_window_renderer(width: i32, height: i32, flags: i32, window: &&Window, renderer: &&Renderer)
[extern "SDL_CreateRenderer"]           def Window::create_renderer(&this, index: i32, flags: i32): &Renderer
[extern "SDL_SetWindowTitle"]           def Window::set_title(&this, title: str)
[extern "SDL_SetRenderDrawBlendMode"]   def Renderer::set_blend_mode(&this, blend: BlendMode)
[extern "SDL_SetRenderDrawColor"]       def Renderer::set_draw_color(&this, r: i32, g: i32, b: i32, a: i32)

[extern "SDL_RenderClear"]     def Renderer::clear(&this)
[extern "SDL_RenderPresent"]   def Renderer::present(&this)
[extern "SDL_RenderCopy"]      def Renderer::copy(&this, texture: &Texture, src: &Rect, dst: &Rect)
[extern "SDL_RenderCopyEx"]    def Renderer::copy_ex(&this, texture: &Texture, src: &Rect, dst: &Rect, angle: f32, center: untyped_ptr, flip: i32)
[extern "SDL_DestroyRenderer"] def Renderer::destroy(&this)
[extern "SDL_CreateTexture"]   def Renderer::create_texture(&this, format: i32, access: i32, w: i32, h: i32): &Texture
[extern "SDL_RenderDrawPoint"] def Renderer::draw_point(&this, x: i32, y: i32)
[extern "SDL_RenderDrawLine"]  def Renderer::draw_line(&this, x1: i32, y1: i32, x2: i32, y2: i32)
[extern "SDL_RenderDrawRect"]  def Renderer::draw_rect(&this, rect: &Rect)
[extern "SDL_RenderFillRect"]  def Renderer::fill_rect(&this, rect: &Rect)

enum WindowMode extern("int") {
    Windowed = extern("0") // This is a hack to hardcode in '0'
    Fullscreen = extern("SDL_WINDOW_FULLSCREEN")
    Borderless = extern("SDL_WINDOW_FULLSCREEN_DESKTOP")
}

[extern "SDL_SetWindowFullscreen"] def Window::set_mode(&this, mode: WindowMode)
[extern "SDL_SetWindowResizable"]  def Window::set_resizable(&this, resizable: bool)
[extern "SDL_DestroyWindow"]  def Window::destroy(&this)
[extern "SDL_GetWindowFlags"] def Window::get_flags(&this): i32
[extern "SDL_SetWindowSize"]  def Window::set_size(&this, w: i32, h: i32)
[extern "SDL_GetWindowSize"]  def Window::get_size(&this, w: &i32, h: &i32)
[extern "SDL_MaximizeWindow"] def Window::maximize(&this)
[extern "SDL_RestoreWindow"]  def Window::restore(&this)
[extern "SDL_QueryTexture"]   def Texture::query(&this, a: untyped_ptr, b: untyped_ptr, w: &i32, h: &i32)
[extern "SDL_LockTexture"]    def Texture::lock(&this, rect: &Rect, pixels: &untyped_ptr, pitch: &i32)
[extern "SDL_UnlockTexture"]  def Texture::unlock(&this)

[extern "SDL_WaitEventTimeout"] def wait_event_timeout(event: &Event, timeout: i32): bool
[extern "SDL_PollEvent"]        def poll_event(event: &Event): bool

[extern "SDL_NUM_SYSTEM_CURSORS"] const CURSOR_TYPE_COUNT: i32

enum CursorType extern("SDL_SystemCursor") {
    Arrow = extern("SDL_SYSTEM_CURSOR_ARROW")
    IBeam = extern("SDL_SYSTEM_CURSOR_IBEAM")
    Wait = extern("SDL_SYSTEM_CURSOR_WAIT")
    Crosshair = extern("SDL_SYSTEM_CURSOR_CROSSHAIR")
    WaitArrow = extern("SDL_SYSTEM_CURSOR_WAITARROW")
    SizeNWSE = extern("SDL_SYSTEM_CURSOR_SIZENWSE")
    SizeNESW = extern("SDL_SYSTEM_CURSOR_SIZENESW")
    SizeWE = extern("SDL_SYSTEM_CURSOR_SIZEWE")
    SizeNS = extern("SDL_SYSTEM_CURSOR_SIZENS")
    SizeAll = extern("SDL_SYSTEM_CURSOR_SIZEALL")
    No = extern("SDL_SYSTEM_CURSOR_NO")
    Hand = extern("SDL_SYSTEM_CURSOR_HAND")
}

[extern "SDL_Cursor"]
struct Cursor

[extern "SDL_FreeCursor"]         def Cursor::destroy(&this)
[extern "SDL_CreateSystemCursor"] def create_system_cursor(cursor: CursorType): &Cursor
[extern "SDL_SetCursor"]          def set_cursor(cursor: &Cursor)
