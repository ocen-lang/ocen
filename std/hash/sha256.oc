import std::buffer::{ Buffer, hex_dump }
import std::libc::{ memset, memcpy, memcmp }
import std::hash::utils::{ rotate_left, rotate_right }

namespace impl {
    let K: [u32; 64] = [
        0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
        0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
        0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
        0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
        0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
        0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
        0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
        0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
    ]
    let init_state: [u32; 8] = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ]

    def ch(x: u32, y: u32, z: u32): u32 => (x & y) ^ (~x & z)
    def maj(x: u32, y: u32, z: u32): u32 => (x & y) ^ (x & z) ^ (y & z)
    def ep0(x: u32): u32 => rotate_right(x, 2) ^ rotate_right(x, 13) ^ rotate_right(x, 22)
    def ep1(x: u32): u32 => rotate_right(x, 6) ^ rotate_right(x, 11) ^ rotate_right(x, 25)
    def sig0(x: u32): u32 => rotate_right(x, 7) ^ rotate_right(x, 18) ^ (x >> 3)
    def sig1(x: u32): u32 => rotate_right(x, 17) ^ rotate_right(x, 19) ^ (x >> 10)
}

struct Context {
    data: [u8; 64],
    data_len: u32,
    bit_len: u64,
    state: [u32; 8]
}

def Context::make(): Context {
    let ctx: Context
    ctx.data_len = 0
    ctx.bit_len = 0
    memcpy(ctx.state, impl::init_state, 8 * 4)
    return ctx
}

def Context::transform(&this, data: &u8) {
    let m: [u32; 64]

    for let i = 0; i < 16; i++ {
        let j = i * 4
        m[i] = (data[j + 0] as u32 << 24) |
               (data[j + 1] as u32 << 16) |
               (data[j + 2] as u32 << 8) |
               (data[j + 3] as u32)
    }

    for let i = 16; i < 64; i++ {
        m[i] = impl::sig1(m[i - 2]) + m[i - 7] + impl::sig0(m[i - 15]) + m[i - 16]
    }

    let a = .state[0]
    let b = .state[1]
    let c = .state[2]
    let d = .state[3]
    let e = .state[4]
    let f = .state[5]
    let g = .state[6]
    let h = .state[7]

    for let i = 0; i < 64; i++ {
        let t1 = h + impl::ep1(e) + impl::ch(e,f,g) + impl::K[i] + m[i]
        let t2 = impl::ep0(a) + impl::maj(a,b,c)
        h = g
        g = f
        f = e
        e = d + t1
        d = c
        c = b
        b = a
        a = t1 + t2
    }

    .state[0] += a
    .state[1] += b
    .state[2] += c
    .state[3] += d
    .state[4] += e
    .state[5] += f
    .state[6] += g
    .state[7] += h
}

def Context::update(&this, data: &u8, len: u64) {
	for let i = 0u64; i < len; i++ {
		.data[.data_len] = data[i]
		.data_len++
		if .data_len == 64 {
			.transform(.data)
			.bit_len += 512
			.data_len = 0
		}
	}
}

def Context::final(&this, hash: &u8) {
    let i = .data_len

    // Pad whatever data is left in the buffer.
    if .data_len < 56 {
        .data[i++] = 0x80
        while i < 56 {
            .data[i++] = 0x00
        }
    } else {
        .data[i++] = 0x80
        while i < 64 {
            .data[i++] = 0x00
        }
        .transform(.data)
        memset(.data, 0, 56)
    }

    // Append to the padding the total message's length in bits and transform.
    .bit_len += (.data_len as u64) * 8
    .data[63] = (.bit_len >> 0) as u8
    .data[62] = (.bit_len >> 8) as u8
    .data[61] = (.bit_len >> 16) as u8
    .data[60] = (.bit_len >> 24) as u8
    .data[59] = (.bit_len >> 32) as u8
    .data[58] = (.bit_len >> 40) as u8
    .data[57] = (.bit_len >> 48) as u8
    .data[56] = (.bit_len >> 56) as u8
    .transform(.data)

    for let i = 0; i < 4; i++ {
        hash[i + 0]  = (.state[0] >> (24 - i * 8)) as u8
        hash[i + 4]  = (.state[1] >> (24 - i * 8)) as u8
        hash[i + 8]  = (.state[2] >> (24 - i * 8)) as u8
        hash[i + 12] = (.state[3] >> (24 - i * 8)) as u8
        hash[i + 16] = (.state[4] >> (24 - i * 8)) as u8
        hash[i + 20] = (.state[5] >> (24 - i * 8)) as u8
        hash[i + 24] = (.state[6] >> (24 - i * 8)) as u8
        hash[i + 28] = (.state[7] >> (24 - i * 8)) as u8
    }
}

def hash_into(input: Buffer, output: &u8) {
    let ctx = Context::make()
    ctx.update(input.data, input.size as u64)
    ctx.final(output)
}

def hash(input: Buffer): Buffer {
    let out = Buffer::make(capacity: 32)
    hash_into(input, out.data)
    out.size = 32
    return out
}

def hash_str(data: str): Buffer => hash(Buffer::from_str(data))

//* Allocation-less hash storage, but specific to SHA256
struct SHA256Hash {
    data: [u8; 32]
}

def SHA256Hash::from(data: Buffer): SHA256Hash {
    let sha: SHA256Hash
    hash_into(data, sha.data)
    return sha
}

def SHA256Hash::hex_dump(this) => hex_dump(.data, 32)
def SHA256Hash::eq(this, other: SHA256Hash): bool => memcmp(.data, other.data, 32) == 0