//! A dynamically typed value, used with {{json}}/etc

import std::vector::Vector
import std::compact_map::Map
import std::json
import std::buffer::Buffer
import std::span::Span
import std::mem

enum ValueType {
    Null
    Bool
    Integer
    Float
    String
    List
    Dictionary
}

def ValueType::str(this): str => .dbg()

union ValueUnion {
    as_bool: bool
    as_int: i64
    as_float: f64
    as_str: Buffer
    as_list: &Vector<&Value>
    as_dict: &Map<str, &Value>
}

struct Value {
    type: ValueType
    u: ValueUnion
    span: Span
}

def Value::new(type: ValueType): &Value {
    let val = mem::alloc<Value>()
    val.type = type
    match type {
        Dictionary => val.u.as_dict = Map<str, &Value>::new()
        List => val.u.as_list = Vector<&Value>::new()
        else => {}
    }
    val.span = Span::default()
    return val
}

def Value::new_str_buf(buf: Buffer): &Value {
    let val = Value::new(String)
    val.u.as_str = buf
    return val
}

def Value::new_str(s: str): &Value {
    let val = Value::new(String)
    val.u.as_str = Buffer::from_str(s)
    return val
}

def Value::new_bool(bul: bool): &Value {
    let val = Value::new(Bool)
    val.u.as_bool = bul
    return val
}

def Value::new_int(num: i64): &Value {
    let val = Value::new(Integer)
    val.u.as_int = num
    return val
}

def Value::new_float(num: f64): &Value {
    let val = Value::new(Float)
    val.u.as_float = num
    return val
}

def Value::new_list(vec: &Vector<&Value>): &Value {
    let val = Value::new(List)
    mem::free(val.u.as_list)
    val.u.as_list = vec
    return val
}

def Value::new_dict(map: &Map<str, &Value>): &Value {
    let val = Value::new(Dictionary)
    mem::free(val.u.as_dict)
    val.u.as_dict = map
    return val
}

def Value::ensure(&this, type: ValueType) {
    if .type != type {
        println(`{.span.start}: Value type mismatch, expected {.type} but got {type}`)
        std::exit(1)
    }
}

def Value::is(this, type: ValueType): bool => .type == type

[operator "[]"]
def Value::at(&this, idx: u32): &Value {
    .ensure(List)
    if idx >= .u.as_list.size {
        println(`{.span.start}: Index out of bounds: {idx}`)
        std::exit(1)
    }
    return .u.as_list.at(idx)
}

[operator "[]"]
def Value::at_key(&this, key: str): &Value {
    .ensure(Dictionary)
    if not .u.as_dict.contains(key) {
        println(`{.span.start}: Key not found: {key}`)
        std::exit(1)
    }
    return .u.as_dict.get(key, null)
}

[operator "[]="]
def Value::set(&this, idx: u32, value: &Value) {
    .ensure(List)
    .u.as_list.data[idx] = value
}

[operator "[]="] def Value::set_str(&this, idx: u32, s: str) => .set(idx, Value::new_str(s))
[operator "[]="] def Value::set_bool(&this, idx: u32, b: bool) => .set(idx, Value::new_bool(b))
[operator "[]="] def Value::set_u32(&this, idx: u32, i: u32) => .set(idx, Value::new_int(i as i64))
[operator "[]="] def Value::set_i32(&this, idx: u32, i: i32) => .set(idx, Value::new_int(i as i64))
[operator "[]="] def Value::set_u64(&this, idx: u32, i: u64) => .set(idx, Value::new_int(i as i64))
[operator "[]="] def Value::set_i64(&this, idx: u32, i: i64) => .set(idx, Value::new_int(i))
[operator "[]="] def Value::set_f32(&this, idx: u32, f: f32) => .set(idx, Value::new_float(f as f64))
[operator "[]="] def Value::set_f64(&this, idx: u32, f: f64) => .set(idx, Value::new_float(f))


[operator "+="]
def Value::push(&this, value: &Value) {
    .ensure(List)
    .u.as_list.push(value)
}

[operator "+="] def Value::push_str(&this, s: str) => .push(Value::new_str(s))
[operator "+="] def Value::push_bool(&this, b: bool) => .push(Value::new_bool(b))
[operator "+="] def Value::push_u32(&this, i: u32) => .push(Value::new_int(i as i64))
[operator "+="] def Value::push_i32(&this, i: i32) => .push(Value::new_int(i as i64))
[operator "+="] def Value::push_u64(&this, i: u64) => .push(Value::new_int(i as i64))
[operator "+="] def Value::push_i64(&this, i: i64) => .push(Value::new_int(i))
[operator "+="] def Value::push_f32(&this, f: f32) => .push(Value::new_float(f as f64))
[operator "+="] def Value::push_f64(&this, f: f64) => .push(Value::new_float(f))

[operator "in"]
def Value::contains(&this, key: str): bool {
    if .type != Dictionary return false
    return .u.as_dict.contains(key)
}

def Value::get(&this, key: str, defolt: &Value = null): &Value {
    .ensure(Dictionary)
    return .u.as_dict.get(key, defolt)
}

[operator "[]="]
def Value::insert(&this, key: str, value: &Value) {
    .ensure(Dictionary)
    .u.as_dict.insert(key, value)
}

[operator "[]="] def Value::insert_str(&this, key: str, s: str) => .insert(key, Value::new_str(s))
[operator "[]="] def Value::insert_bool(&this, key: str, b: bool) => .insert(key, Value::new_bool(b))
[operator "[]="] def Value::insert_u32(&this, key: str, i: u32) => .insert(key, Value::new_int(i as i64))
[operator "[]="] def Value::insert_i32(&this, key: str, i: i32) => .insert(key, Value::new_int(i as i64))
[operator "[]="] def Value::insert_u64(&this, key: str, i: u64) => .insert(key, Value::new_int(i as i64))
[operator "[]="] def Value::insert_i64(&this, key: str, i: i64) => .insert(key, Value::new_int(i))
[operator "[]="] def Value::insert_f32(&this, key: str, f: f32) => .insert(key, Value::new_float(f as f64))
[operator "[]="] def Value::insert_f64(&this, key: str, f: f64) => .insert(key, Value::new_float(f))

def Value::as_bool(&this): bool {
    .ensure(Bool)
    return .u.as_bool
}

def Value::as_int(&this): i64 {
    return match .type {
        Integer => .u.as_int
        Float => .u.as_float as i64
        else => {
            .ensure(Float) // Will crash
            assert false, "unreachable"
        }
    }
}

def Value::as_float(&this): f64 {
    return match .type {
        Integer => .u.as_int as f64
        Float => .u.as_float
        else => {
            .ensure(Float) // Will crash
            assert false, "unreachable"
        }
    }
}

def Value::as_str(&this): Buffer {
    .ensure(String)
    return .u.as_str
}

def Value::as_list(&this): &Vector<&Value> {
    .ensure(List)
    return .u.as_list
}

def Value::as_dict(&this): &Map<str, &Value> {
    .ensure(Dictionary)
    return .u.as_dict
}

def Value::dbg(&this): str {
    let buf = json::serialize(this)
    return buf.str()
}

[operator "=="]
def Value::eq_str(&this, other: str): bool {
    if not .is(String) return false
    return .u.as_str.str() == other
}

[operator "=="]
def Value::eq_bool(&this, other: bool): bool {
    if not .is(Bool) return false
    return .u.as_bool == other
}

[operator "=="]
def Value::eq_i64(&this, other: i64): bool {
    if not .is(Integer) return false
    return .u.as_int == other
}

[operator "=="]
def Value::eq_u32(&this, other: u32): bool {
    if not .is(Integer) return false
    return .u.as_int as u32 == other
}

def Value::free(&this) {
    match .type {
        String => .u.as_str.free()
        List => {
            for val : .u.as_list.iter() {
                val.free()
            }
            .u.as_list.free()
        }
        Dictionary => {
            for iter : .u.as_dict.iter() {
                mem::free(iter.key)
                iter.value.free()
            }
            .u.as_dict.free()
        }
        else => {}
    }
    mem::free(this)
}