// Do not include this file directly, use lib/daecor/all.ae
use "lib/math.ae"

def modf(n: f32, m: f32): f32 extern("fmod")

struct Vec2i {
    x: i32
    y: i32
}

struct Vec2iPair {
    v1: Vec2i
    v2: Vec2i
}

struct Vec2f {
    x: f32
    y: f32
}

def Vec2f::radians(this): f32 => atan2(.y, .x)
def Vec2f::degrees(this): f32 => degrees(.radians())
def Vec2f::from_rad(rad: f32): Vec2f => Vec2f(cos(rad), sin(rad))
def Vec2f::from_polar(radians: f32, length: f32): Vec2f => Vec2f::from_rad(radians).multf(length)
def Vec2f::from_polar_deg(deg: f32, length: f32): Vec2f => Vec2f::from_polar(radians(deg), length)
def Vec2f::from_degrees(degrees: f32): Vec2f => Vec2f::from_rad(radians(degrees))

def Vec2f::to_i(this): Vec2i => Vec2i(.x as i32, .y as i32)
def Vec2i::to_f(this): Vec2f => Vec2f(.x as f32, .y as f32)

def Vec2f::min(this): f32 => minf(.x, .y)
def Vec2f::max(this): f32 => maxf(.x, .y)

def Vec2i::min(this): i32 => min(.x, .y)
def Vec2i::max(this): i32 => max(.x, .y)

def in_bounds(n: i32, min: i32, max: i32): bool => min <= n <= max
def in_boundsf(n: f32, min: f32, max: f32): bool => min <= n <= max

def wrapf(n: f32, min: f32, max: f32): f32 => min + modf(n - min, max - min)

/// General vector overloads, Vec2i

def Vec2i::is_zero(&this): bool => .x == 0 and .y == 0

def Vec2i::add(this, other: Vec2i): Vec2i => Vec2i(.x + other.x, .y + other.y)
def Vec2i::sub(this, other: Vec2i): Vec2i => Vec2i(.x - other.x, .y - other.y)
def Vec2i::div(this, other: Vec2i): Vec2i => Vec2i(.x / other.x, .y / other.y)
def Vec2i::mult(this, other: Vec2i): Vec2i => Vec2i(.x * other.x, .y * other.y)

def Vec2i::addi(this, val: i32): Vec2i => Vec2i(.x + val, .y + val)
def Vec2i::subi(this, val: i32): Vec2i => Vec2i(.x - val, .y - val)
def Vec2i::divi(this, val: i32): Vec2i => Vec2i(.x / val, .y / val)
def Vec2i::multi(this, val: i32): Vec2i => Vec2i(.x * val, .y * val)


def Vec2i::neg(this): Vec2i => Vec2i(-.x, -.y)
def Vec2i::abs(this): Vec2i => Vec2i(abs(.x), abs(.y))

def Vec2i::dot(this, other: Vec2i): i32 => .x * other.x + .y * other.y

def Vec2i::cross(this, other: Vec2i): Vec2i {
    return Vec2i(
        .y * other.x - .x * other.y,
        .x * other.y - .y * other.x
    )
}

def Vec2i::length(this): f32 => sqrt((.x * .x + .y * .y) as f32)
def Vec2i::length_sq(this): i32 => .x * .x + .y * .y
def Vec2i::dist(this, other: Vec2i): f32 => .sub(other).length()

def Vec2i::eq(this, other: Vec2i): bool => .x == other.x and .y == other.y

def Vec2i::shift(this, dir: Direction, amount: i32): Vec2i {
    return match dir {
        Up => .sub(Vec2i(0, amount))
        Right => .add(Vec2i(amount, 0))
        Down => .add(Vec2i(0, amount))
        Left => .sub(Vec2i(amount, 0))
    }
}

/// General vector overloads, Vec2f

def Vec2f::add(this, other: Vec2f): Vec2f => Vec2f(.x + other.x, .y + other.y)
def Vec2f::sub(this, other: Vec2f): Vec2f => Vec2f(.x - other.x, .y - other.y)
def Vec2f::div(this, other: Vec2f): Vec2f => Vec2f(.x / other.x, .y / other.y)
def Vec2f::mult(this, other: Vec2f): Vec2f => Vec2f(.x * other.x, .y * other.y)

def Vec2f::addf(this, val: f32): Vec2f => Vec2f(.x + val, .y + val)
def Vec2f::subf(this, val: f32): Vec2f => Vec2f(.x - val, .y - val)
def Vec2f::divf(this, val: f32): Vec2f => Vec2f(.x / val, .y / val)
def Vec2f::multf(this, val: f32): Vec2f => Vec2f(.x * val, .y * val)

def Vec2f::neg(this): Vec2f => Vec2f(-.x, -.y)
def Vec2f::abs(this): Vec2f => Vec2f(absf(.x), absf(.y))
def Vec2f::dot(this, other: Vec2f): f32 => .x * other.x + .y * other.y

def Vec2f::cross(this, other: Vec2f): Vec2f {
    return Vec2f(.y * other.x - .x * other.y, .x * other.y - .y * other.x)
}

def Vec2f::length(this): f32 => sqrt(.x * .x + .y * .y)
def Vec2f::length_sq(this): f32 => .x * .x + .y * .y
def Vec2f::dist(this, other: Vec2f): f32 => .sub(other).length()

def Vec2f::normalized(this): Vec2f => .divf(.length())

def Vec2f::eq(this, other: Vec2f): bool => .x == other.x and .y == other.y


// Other stuff

def reduce_degrees(deg: f32): f32 {
    if absf(modf(deg, 360.0)) > 180.0
        return modf(deg, 360.0) - 360.0
    return deg
}

def Vec2f::rotate(this, rad: f32): Vec2f {
    return Vec2f(
        .x * cos(rad) - .y * sin(rad),
        .x * sin(rad) + .y * cos(rad),
    )
}

def Vec2f::rotate_deg(this, deg: f32): Vec2f => .rotate(radians(deg))
