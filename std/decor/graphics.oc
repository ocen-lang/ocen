// Do not include this file directly, use lib/daecor/all.ae

const DEFAULT_WINDOW_XLEN = 800
const DEFAULT_WINDOW_YLEN = 600

struct GraphicsContext {
    window: &SDLWindow
    renderer: &SDLRenderer
    font: &TTFFont
    font_size: i32
    font_color: Color
    default_color: Color
    color: Color

    cursor_cache: [&SDLCursor; CURSOR_TYPE_COUNT]
    current_cursor: CursorType

    restore_size: Vec2i
    prev_size: Vec2i
    outlined: bool

    TPS: i32
    FPS: i32

    fps_cache: [i32; 10]
    fps_index: i32

    num_frames: i32
    exit_on_escape: bool
}

let gfx: GraphicsContext

def GraphicsContext::TPF(&this): i32 => gfx.TPS / gfx.FPS

def set_title(title: string) {
    gfx.window.set_title(title)
}

def set_window_mode(mode: WindowMode) {
    gfx.window.set_mode(mode)
}

def set_window_resizable(resizable: bool) {
    gfx.window.set_resizable(resizable)
}

def is_window_resizable(): bool => (SDL_WINDOW_RESIZABLE & gfx.window.get_flags()) != 0

def set_exit_on_escape(exit_on_escape: bool) {
    gfx.exit_on_escape = exit_on_escape
}

def set_window_size(size: Vec2i) {
    gfx.window.set_size(size.x, size.y)
}

def get_window_size(): Vec2i {
    let ret: Vec2i
    gfx.window.get_size(&ret.x, &ret.y)
    return ret
}

def was_window_resized(): bool => get_window_size().eq(gfx.prev_size)
def get_window_mid(): Vec2i => get_window_size().divi(2)

def is_in_window(pos: Vec2i): bool {
    let size = get_window_size()
    return (0 <= pos.x < size.x and 0 <= pos.y < size.y)
}

def maximize_window(): Vec2i {
    gfx.restore_size = get_window_size()
    gfx.window.maximize()
    return get_window_size()
}

def restore_window(): Vec2i {
    gfx.window.restore()
    if is_window_resizable() {
        set_window_size(gfx.restore_size)
    }
    return gfx.restore_size
}

def set_blend(mode: BlendMode) {
    gfx.renderer.set_blend_mode(mode)
}

def draw_pixel(pos: Vec2i) {
    gfx.renderer.draw_point(pos.x, pos.y)
}

def draw_line(p1: Vec2i, p2: Vec2i) {
    gfx.renderer.draw_line(p1.x, p1.y, p2.x, p2.y)
}

def draw_line_pair(pair: Vec2iPair) {
    draw_line(pair.v1, pair.v2)
}

def draw_horz_line(pos: Vec2i, len: i32) {
    gfx.renderer.draw_line(pos.x, pos.y, pos.x + len, pos.y)
}

def draw_vert_line(pos: Vec2i, len: i32) {
    gfx.renderer.draw_line(pos.x, pos.y, pos.x, pos.y + len)
}

def draw_rect(rect: Rect) {
    gfx.renderer.draw_rect(&rect)
}

def draw_rect_centered(pos: Vec2i, size: Vec2i) {
    draw_rect(Rect(pos.x - size.x / 2, pos.y - size.y / 2, size.x, size.y))
}

def fill_rect(rect: Rect) {
    gfx.renderer.fill_rect(&rect)
}

def fill_rect_centered(pos: Vec2i, size: Vec2i) {
    fill_rect(Rect(pos.x - size.x / 2, pos.y - size.y / 2, size.x, size.y))
}

def draw_rect_points(p1: Vec2i, p2: Vec2i) {
    draw_rect(Rect(
        x: min(p1.x, p2.x),
        y: min(p1.y, p2.y),
        w: abs(p1.x - p2.x),
        h: abs(p1.y - p2.y),
    ))
}

def fill_rect_points(p1: Vec2i, p2: Vec2i) {
    fill_rect(Rect(
        x: min(p1.x, p2.x),
        y: min(p1.y, p2.y),
        w: abs(p1.x - p2.x),
        h: abs(p1.y - p2.y),
    ))
}

def draw_square(pos: Vec2i, size: i32) {
    draw_rect(Rect(pos.x - size / 2, pos.y - size / 2, size, size))
}

def fill_square(pos: Vec2i, size: i32) {
    fill_rect(Rect(pos.x - size / 2, pos.y - size / 2, size, size))
}

def fill_square_expanded(pos: Vec2i, size: i32, expand: i32) {
    fill_rect(Rect(
        x: pos.x - expand,
        y: pos.y - expand,
        w: size + expand * 2,
        h: size + expand * 2,
    ))
}

def fill_rect_border(rect: Rect, size: i32) {
    fill_rect(Rect(rect.x-size,    rect.y-size,     rect.w+size*2,  size))
    fill_rect(Rect(rect.x-size,    rect.y+ rect.h,  rect.w+size*2,  size))
    fill_rect(Rect(rect.x-size,    rect.y-size,     size,           rect.h+size*2))
    fill_rect(Rect(rect.x+rect.w,  rect.y-size,     size,           rect.h+size*2))
}

def fill_square_border(pos: Vec2i, len: i32, size: i32) {
    fill_rect_border(Rect(pos.x, pos.y, len, len), size)
}

def draw_circle(pos: Vec2i, radius: i32) {
    let rsq = (radius*radius) as f32;
    let yoff = radius;
    for let xoff = 0; xoff <= yoff; xoff += 1 {
        let yc = sqrt(rsq - ((xoff+1)*(xoff+1)) as f32);
        let ym = yoff as f32 - 0.5;

        // 8 sections of circle
        draw_pixel(Vec2i(pos.x+xoff, pos.y+yoff));  // 1
        draw_pixel(Vec2i(pos.x-yoff, pos.y+xoff));  // 2
        draw_pixel(Vec2i(pos.x-xoff, pos.y-yoff));  // 3
        draw_pixel(Vec2i(pos.x+yoff, pos.y-xoff));  // 4

        draw_pixel(Vec2i(pos.x-xoff, pos.y+yoff));  // 5
        draw_pixel(Vec2i(pos.x-yoff, pos.y-xoff));  // 6
        draw_pixel(Vec2i(pos.x+xoff, pos.y-yoff));  // 7
        draw_pixel(Vec2i(pos.x+yoff, pos.y+xoff));  // 8
        yoff -= (yc <= ym) as i32;
    }
}

def fill_circle(pos: Vec2i, radius: i32) {
    let rsq = (radius*radius) as f32;
    let yoff = radius;
    for let xoff = 0; xoff <= yoff; xoff += 1 {
        let yc = sqrt(rsq - ((xoff+1)*(xoff+1)) as f32);
        let ym = yoff as f32 - 0.5;

        // connecting 8 sections of circle
        draw_line(Vec2i(pos.x+xoff, pos.y-yoff), Vec2i(pos.x+xoff, pos.y+yoff));  // 7 to 1
        draw_line(Vec2i(pos.x-yoff, pos.y+xoff), Vec2i(pos.x+yoff, pos.y+xoff));  // 2 to 8
        draw_line(Vec2i(pos.x-xoff, pos.y-yoff), Vec2i(pos.x-xoff, pos.y+yoff));  // 3 to 5
        draw_line(Vec2i(pos.x-yoff, pos.y-xoff), Vec2i(pos.x+yoff, pos.y-xoff));  // 6 to 4

        yoff -= (yc <= ym) as i32;
    }
}

def get_color(): Color => gfx.color

def set_color(color: Color) {
    gfx.color = color
    gfx.renderer.set_draw_color(color.r, color.g, color.b, color.a)
}

def draw_tri(p1: Vec2i, p2: Vec2i, p3: Vec2i) {
    gfx.renderer.draw_tri_color(
        p1.x, p1.y,
        p2.x, p2.y,
        p3.x, p3.y,
        gfx.color.to_u32()
    )
}

def fill_tri(p1: Vec2i, p2: Vec2i, p3: Vec2i) {
    gfx.renderer.fill_tri_color(
        p1.x, p1.y,
        p2.x, p2.y,
        p3.x, p3.y,
        gfx.color.to_u32()
    )
}

def draw_poly(num: i32, points: &Vec2i) {
    let xs: [i16; num]
    let ys: [i16; num]
    for let i = 0; i < num; i += 1 {
        xs[i] = points[i].x as i16;
        ys[i] = points[i].y as i16;
    }
    gfx.renderer.draw_poly_color(xs, ys, num, gfx.color.to_u32())
}

def fill_poly(num: i32, points: &Vec2i) {
    let xs: [i16; num]
    let ys: [i16; num]
    for let i = 0; i < num; i += 1 {
        xs[i] = points[i].x as i16
        ys[i] = points[i].y as i16
    }
    gfx.renderer.fill_poly_color(xs, ys, num, gfx.color.to_u32())
}

def draw_bezier(num: i32, points: &Vec2i, interp_steps: i32) {
    let xs: [i16; num]
    let ys: [i16; num]
    for let i = 0; i < num; i += 1 {
        xs[i] = points[i].x as i16
        ys[i] = points[i].y as i16
    }
    gfx.renderer.draw_bezier(xs, ys, num, interp_steps, gfx.color.to_u32())
}

def fill_screen() {
    gfx.renderer.clear()
}

def clear() {
    let prev = gfx.color
    set_color(gfx.default_color)
    fill_screen()
    set_color(prev)
}

def set_outlined(outlined: bool) {
    gfx.outlined = outlined
}

def set_cursor(type: CursorType) {
    if gfx.current_cursor == type return

    let cursor_ptr = &gfx.cursor_cache[type as i32]
    if not (*cursor_ptr)? {
        *cursor_ptr = SDL::create_system_cursor(type)
    }
    SDL::set_cursor(*cursor_ptr)
    gfx.current_cursor = type
}

def outline_window() {
    let prev = gfx.color
    set_color(Color::White())
    let size = get_window_size()
    fill_rect_border(Rect(0, 0, size.x, size.y), -2)
    set_color(prev)
}

def present() {
    if gfx.outlined {
        outline_window()
    }
    gfx.renderer.present()
}

def get_ticks(): i32 extern("SDL_GetTicks")
def sec_to_ticks(sec: i32): i32 => gfx.TPS * sec
def get_time_in(sec: i32): i32 => gfx.TPS * sec + get_ticks()

def frame_start(): i32 {
    clear()
    return get_ticks()
}

def frame_end(time: i32) {
    present()
    handle_events(time + gfx.TPF())

    if gfx.exit_on_escape and keys.pressed(Key::Escape) {
        exit(0)
    }

    let delta = get_ticks() - time
    let fps =  if delta > 0 then 1000 / delta else 0
    gfx.fps_cache[gfx.fps_index % 10] = fps
    gfx.fps_index += 1

    let fps_sum = 0
    for let i = 0; i < 10; i += 1 {
        fps_sum += gfx.fps_cache[i]
    }

    let txt = `Daecor | FPS: {fps_sum / 10}`
    set_title(txt)
    free(txt)
}


def gfx_quit() {
    gfx.window.destroy()
    gfx.renderer.destroy()
    for let i = 0; i < CURSOR_TYPE_COUNT; i += 1 {
        let cursor = gfx.cursor_cache[i]
        if cursor? cursor.destroy()
    }
    SDL::quit()
}

def gfx_init() {
    if SDL::init(SDL_INIT_EVERYTHING) < 0 {
        println("SDL could not initialize: %s", SDL::get_error())
        exit(0)
    }

    gfx.window = SDL::create_window(
        "Daecor",
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        DEFAULT_WINDOW_XLEN,
        DEFAULT_WINDOW_YLEN,
        SDL_WINDOW_RESIZABLE
    )

    gfx.renderer = gfx.window.create_renderer(-1, SDL_RENDERER_ACCELERATED)
    register_exit_callback(gfx_quit)

    gfx.current_cursor = CursorType::Arrow
    gfx.default_color = Color::Black()
    gfx.outlined = true;
    gfx.renderer.set_blend_mode(BlendMode::None)
    gfx.restore_size = Vec2i(DEFAULT_WINDOW_XLEN, DEFAULT_WINDOW_YLEN)
    gfx.prev_size = Vec2i(DEFAULT_WINDOW_XLEN, DEFAULT_WINDOW_YLEN)
    gfx.exit_on_escape = true
    set_window_resizable(true)

    gfx.FPS = 60
    gfx.TPS = 1000

    clear()
    present()
    clear()
}
