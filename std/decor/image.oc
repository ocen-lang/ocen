// Do not include this file directly, use lib/daecor/all.ae

struct Image {
    tex: &Texture
    width: i32
    height: i32
}

def Image::destroy(&this) {
    .tex.destroy()
    free(this)
}

def Image::load(path: string): &Image {
    let tex = gfx.renderer.load_image(path)
    let w = 0
    let h = 0
    tex.query(null, null, &w, &h)

    let image = calloc(1, sizeof(Image)) as &Image
    *image = Image(tex, w, h)
    return image
}

def Image::draw(&this, pos: Vec2i) {
    let rect = Rect(pos.x, pos.y, .width, .height)
    gfx.renderer.copy(.tex, null, &rect)
}

def Image::draw_t(&this, pos: Vec2i, scale: f32, angle: f32) {
    let new_width = (.width as f32 * scale) as i32
    let new_height = (.height as f32 * scale) as i32
    let rect = Rect(pos.x, pos.y, new_width, new_height)

    gfx.renderer.copy_ex(.tex, null, &rect, degrees(angle), null, 0)
}

def Image::draw_centered(&this, pos: Vec2i) {
    let new_pos = Vec2i(pos.x - .width / 2, pos.y - .height / 2)
    .draw(new_pos)
}

def Image::draw_centered_t(&this, pos: Vec2i, scale: f32, angle: f32) {
    let new_width = (.width as f32 * scale) as i32
    let new_height = (.height as f32 * scale) as i32
    let rect = Rect(
        pos.x - new_width / 2,
        pos.y - new_height / 2,
        new_width, new_height)

    gfx.renderer.copy_ex(.tex, null, &rect, degrees(angle), null, 0)
}

def Image::draw_rect(&this, rect: Rect) {
    gfx.renderer.copy(.tex, null, &rect)
}

def Image::draw_rect_t(&this, rect: Rect, angle: f32) {
    gfx.renderer.copy_ex(.tex, null, &rect, degrees(angle), null, 0)
}