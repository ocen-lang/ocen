// Do not include this file directly, use lib/daecor/all.ae

def handle_events(end_frame: i32) {
    let ticks_left = end_frame - get_ticks()
    mouse.prev = mouse.curr
    keys.prev = keys.curr

    while true {
        let event: Event
        let timeout = if ticks_left > 0 then ticks_left else 1

        if SDL::wait_event_timeout(&event, timeout) {
            match event.type {
                Quit => {
                    println("Quitting now!")
                    exit(0)
                }
                KeyDown => {
                    // println("got keydown %d", event.key.keysym.sym)
                    let k = event.key.keysym.scancode
                    if k as i32 < 1024 {
                        keys.curr.keys[k as i32] = true
                    }
                }
                KeyUp => {
                    // println("got keyup %d", event.key.keysym.sym)
                    let k = event.key.keysym.scancode
                    if k as i32 < 1024 {
                        keys.curr.keys[k as i32] = false
                    }
                }
                MouseDown => {
                    // println("got mousebuttondown %s", event.button.button.str())
                    let b = event.button.button
                    mouse.curr.buttons[b as i32] = true
                }
                MouseUp => {
                    // println("got mousebuttonup %s", event.button.button.str())
                    let b = event.button.button
                    mouse.curr.buttons[b as i32] = false
                }
                Wheel => {
                    // println("got wheel %d %d", event.wheel.x, event.wheel.y)
                    mouse.curr.wheel_dirs[MouseWheel::Right as i32] = event.wheel.x > 0
                    mouse.curr.wheel_dirs[MouseWheel::Left as i32] = event.wheel.x < 0
                    mouse.curr.wheel_dirs[MouseWheel::Down as i32] = event.wheel.y > 0
                    mouse.curr.wheel_dirs[MouseWheel::Up as i32] = event.wheel.y < 0
                }
                Window => {
                    gfx.prev_size = get_window_size()
                }
                else => {}
            }
        }
        ticks_left = end_frame - get_ticks();
        if ticks_left <= 0 then break
    }
    SDL::get_mouse_state(&mouse.curr.pos.x, &mouse.curr.pos.y);
    SDL::get_relative_mouse_state(&mouse.curr.vec.x, &mouse.curr.vec.y);
}