/// out: "3"


import std::vector::Vector


def foo(v: &Vector<i32>) {
    v.push(1)
}

def main() {
    let my_List = Vector<i32>::new()
    foo(my_List)
    foo(my_List)
    foo(my_List)

    println(`{my_List.size}`)
}

//* Mathematical vector library

import std::math

//* A type representing a 3D vector
struct Vec3<T> {
    x: T
    y: T
    z: T
}

def Vec3::str(this): str => f"{.x} {.y} {.z}"

def Vec3::add(this, other: Vec3<T>): Vec3<T> => Vec3<T>(.x + other.x, .y + other.y, .z + other.z)
def Vec3::adds(this, val: T): Vec3<T> => Vec3<T>(.x + val, .y + val, .z + val)

def Vec3::sub(this, other: Vec3<T>): Vec3<T> => Vec3<T>(.x - other.x, .y - other.y, .z - other.z)
def Vec3::subs(this, val: T): Vec3<T> => Vec3<T>(.x - val, .y - val, .z - val)

def Vec3::mult(this, other: Vec3<T>): Vec3<T> => Vec3<T>(.x * other.x, .y * other.y, .z * other.z)
def Vec3::mults(this, val: T): Vec3<T> => Vec3<T>(.x * val, .y * val, .z * val)

def Vec3::div(this, other: Vec3<T>): Vec3<T> => Vec3<T>(.x / other.x, .y / other.y, .z / other.z)
def Vec3::divs(this, val: T): Vec3<T> => Vec3<T>(.x / val, .y / val, .z / val)

def Vec3::dot(this, other: Vec3<T>): T => .x * other.x + .y * other.y + .z * other.z

def Vec3::cross(this, other: Vec3<T>): Vec3<T> {
    return Vec3<T>(
        .y * other.z - .z * other.y,
        .z * other.x - .x * other.z,
        .x * other.y - .y * other.x,
    )
}


def Vec3::length_sq(this): T => .x * .x + .y * .y + .z * .z
def Vec3::length(this): f32 => (.length_sq() as f32).sqrt()
def Vec3::normalized(this): Vec3<f32> {
    let len = .length()
    return Vec3<f32>(.x as f32 / len, .y as f32 / len, .z as f32 / len)
}

def Vec3::reflect(this, normal: Vec3<T>): Vec3<T> {
    return .sub(normal.mults((2 as T) * .dot(normal)));
}

def Vec3::rotateX(&this, angle: f32): Vec3<f32> {
    let c = angle.cos()
    let s = angle.sin()
    let x = .x as f32
    let y = .y as f32 * c - .z as f32 * s
    let z = .y as f32 * s + .z as f32 * c
    return Vec3<f32>(x, y, z)
}

def Vec3::rotateY(&this, angle: f32): Vec3<f32> {
    let c = angle.cos()
    let s = angle.sin()
    let x = .z as f32 * s + .x as f32 * c
    let y = .y as f32
    let z = .z as f32 * c - .x as f32 * s
    return Vec3<f32>(x, y, z)
}

def Vec3::rotateZ(&this, angle: f32): Vec3<f32> {
    let c = angle.cos()
    let s = angle.sin()
    let x = .x as f32 * c - .y as f32 * s
    let y = .x as f32 * s + .y as f32 * c
    let z = .z as f32
    return Vec3<f32>(x, y, z)
}

typedef Vec3f = Vec3<f32>
typedef Vec3i = Vec3<i32>