use "@/lexer.ae"
use "@/parser.ae"
use "@/errors.ae"
use "@/utils.ae"
use "@/passes/mod.ae"

def usage(code: i32) {
    println("--------------------------------------------------------")
    println("Usage: ./aecor [options] <file>")
    println("Options:")
    println("    -o path   Output executable (default: ./out)")
    println("    -c path   Output C code (default: {out}.c)")
    println("    -e0       Minimal one-line errors")
    println("    -e1       Error messages with source code (default)")
    println("    -e2       Error messages with source / hints")
    println("    -s        Silent mode (no debug output)")
    println("    -n        Don't compile C code (default: false)")
    println("    -d        Emit debug information (default: false)")
    println("    -l        Library path (root of aecor repo)")
    println("                   (Default: working directory)")
    println("--------------------------------------------------------")
    exit(code)
}

def main(argc: i32, argv: &string) {
    let exec_path = "./out"
    let c_path = null as string
    let filename = null as string
    let compile_c = true
    let silent = false
    let lib_path = null as string
    let debug = false
    let error_level = 1

    for let i = 1; i < argc; i += 1 {
        match argv[i] {
            "-h" => usage(code: 0)
            "-s" => silent = true
            "-d" => debug = true
            "-n" => compile_c = false
            "-o" => {
                i += 1
                exec_path = argv[i]
            }
            "-l" => {
                i += 1
                lib_path = argv[i]
            }
            "-c" => {
                i += 1
                c_path = argv[i]
            }
            "-e0" => error_level = 0
            "-e1" => error_level = 1
            "-e2" => error_level = 2
            else => {
                if argv[i][0] == '-' {
                    println("Unknown option: %s", argv[i])
                    usage(1)
                } else if not filename? {
                    filename = argv[i]
                } else {
                    println("Unknown option/argument: '%s'", argv[i])
                    usage(code: 1)
                }
            }
        }
    }

    if not filename? {
        println("No file specified")
        usage(code: 1)
    }

    if not c_path? {
        c_path = `{exec_path}.c`
    }

    let program = Program::new()
    program.error_level = error_level
    Parser::parse_toplevel(filename, program)

    if program.errors.size > 0 {
        display_error_messages(program.errors, error_level)
        exit(1)
    }

    let c_code = run_all_passes(program)

    if program.errors.size > 0 {
        display_error_messages(program.errors, error_level)
        exit(1)
    }

    let out_file = File::open(c_path, "w")
    out_file.puts(c_code)
    out_file.close()

    if not compile_c then return 0

    let cmdbuf = calloc(1, 1024) as string
    cmdbuf.concat(`gcc -o {exec_path} {c_path}`)
    if debug {
        cmdbuf.concat(" -ggdb3")
    }

    if not silent {
        println("[+] %s", cmdbuf)
    }
    let code = system(cmdbuf)
    if code != 0 {
        println("[-] Compilation failed")
        exit(1)
    }
}
