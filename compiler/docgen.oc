
import @ast::program::{ Program, Namespace }
import @types::{ Type, BaseType }
import @ast::nodes::*
import @ast::scopes::Symbol
import std::value::Value
import std::vector::Vector
import std::json
import std::buffer::Buffer
import std::span::Span

struct DocGenerator {}

def DocGenerator::gen_enum(&this, enum_: &Enum): &Value {
    let enum_doc = Value::new(Dictionary)
    enum_doc.insert("id", Value::new_str(`{enum_.type:x}`))
    enum_doc.insert("name", Value::new_str(enum_.sym.name))
    if enum_.sym.comment? {
        enum_doc.insert("description", Value::new_str(enum_.sym.comment))
    }
    enum_doc.insert("kind", Value::new_str("enum"))
    if enum_.sym.is_extern {
        enum_doc.insert("extern", Value::new_str(enum_.sym.out_name))
    } else {
        .gen_location(enum_doc, enum_.sym.span)
    }

    let fields_doc = Value::new(List)
    for field : enum_.fields.iter() {
        let field_doc = Value::new(Dictionary)
        field_doc.insert("name", Value::new_str(field.sym.name))
        if field.sym.comment? {
            field_doc.insert("description", Value::new_str(field.sym.comment))
        }
        if field.sym.is_extern {
            field_doc.insert("extern", Value::new_str(field.sym.out_name))
        }
        fields_doc.push(field_doc)
    }
    enum_doc.insert("fields", fields_doc)

    let methods_doc = .gen_methods(enum_.type)
    enum_doc.insert("methods", methods_doc)

    return enum_doc
}

def DocGenerator::gen_location(&this, obj: &Value, span: Span) {
    let start = span.start
    if start.is_valid() {
        let src_str = `{start.filename}#L{start.line}`
        obj.insert("source", Value::new_str(src_str))
    }
}

def DocGenerator::gen_templated_type(&this, base: &Type, args: &Vector<&Type>): str {
    let base_name = .gen_typename_str(base)
    let buf = Buffer::make()
    buf.putsf(base_name)
    buf.puts("<")
    let first = true
    for arg_type : args.iter() {
        if not first then buf.puts(", ")
        first = false

        let param_name = .gen_typename_str(arg_type)
        buf.putsf(param_name)
    }
    buf.puts(">")
    return buf.str()
}

def DocGenerator::gen_typename_str(&this, type: &Type): str {
    assert type?, "gen_typename_str called with null type"

    match type.base {
        Char | Bool | Void | I8 | I16 | I32 | I64 |
        U8 | U16 | U32 | U64 | F32 | F64 | Alias | Enum => {
            return `\{\{{type:x}\}\}`
        }
        Structure => {
            if not type.template_instance? {
                return `\{\{{type:x}\}\}`

            } else {
                let struc = type.u.struc
                let instance = type.template_instance
                let parent: &Symbol = instance.parent
                assert parent.type == Structure, "Template instance parent is not a structure"

                let parent_struc = parent.u.struc
                return .gen_templated_type(parent_struc.type, instance.args)
            }
        }
        UnresolvedTemplate => {
            let uspec = type.u.unresolved_spec
            return .gen_templated_type(uspec.base, uspec.args)
        }
        Pointer => {
            let sub = .gen_typename_str(type.u.ptr)
            sub.replace_with(`&{sub}`)
            return sub
        }
        Array => {
            let sub = .gen_typename_str(type.u.arr.elem_type)
            sub.replace_with(`[{sub}]`)
            return sub
        }
        Function => {
            let buf = Buffer::make()
            buf.puts("fn(")
            let first = true
            for param : type.u.func.params.iter() {
                if not first then buf.puts(", ")
                first = false

                let param_name = .gen_typename_str(param.type)
                buf.putsf(param_name)
            }
            buf.puts("): ")
            let return_name = .gen_typename_str(type.u.func.return_type)
            buf.putsf(return_name)
            return buf.str()
        }
        Unresolved => {
            let node = type.u.unresolved
            match node.type {
                Identifier => {
                    return node.u.ident.name.copy()
                }
                else => {
                    assert false, `Unhandled type in gen_typename_str: {node.type}`
                    return "<unknown>"
                }
            }
        }
        else => {
            assert false, `Unhandled type in gen_typename_str: {type.base}`
            return "<unknown>"
        }
    }
}

def DocGenerator::gen_typename(&this, type: &Type): &Value {
    assert type?, "gen_typename called with null type"
    return Value::new_str(.gen_typename_str(type))
}

def DocGenerator::gen_methods(&this, type: &Type): &Value {
    assert type.can_have_methods(), "gen_methods called with type that can't have methods"

    let methods_doc = Value::new(Dictionary)
    for it : type.methods.iter() {
        let method = it.value
        let method_doc = .gen_function(method)
        methods_doc.insert(method.sym.name, method_doc)
    }
    return methods_doc
}

def DocGenerator::gen_function(&this, func: &Function): &Value {
    let func_doc = Value::new(Dictionary)
    func_doc.insert("id", Value::new_str(`{func:x}`))
    func_doc.insert("name", Value::new_str(`{func.sym.name}`))

    if func.sym.comment? {
        func_doc.insert("description", Value::new_str(func.sym.comment))
    }
    if func.is_method {
        func_doc.insert("kind", Value::new_str("method"))
        func_doc.insert("parent", .gen_typename(func.parent_type))
    } else {
        func_doc.insert("kind", Value::new_str("function"))
    }

    if func.sym.is_extern {
        func_doc.insert("extern", Value::new_str(func.sym.out_name))
    } else {
        .gen_location(func_doc, func.span)
    }

    let return_doc = Value::new(Dictionary)
    let ret_type = func.return_type
    return_doc.insert("type", .gen_typename(ret_type))

    let params_doc = Value::new(List)
    for param : func.params.iter() {
        let param_doc = Value::new(Dictionary)
        param_doc.insert("name", Value::new_str(`{param.sym.name}`))
        if param.sym.comment? {
            param_doc.insert("description", Value::new_str(param.sym.comment))
        }
        param_doc.insert("type", .gen_typename(param.type))
        params_doc.push(param_doc)
    }

    func_doc.insert("params", params_doc)
    func_doc.insert("return", return_doc)
    return func_doc
}

def DocGenerator::gen_struct(&this, struc: &Structure): &Value {
    let struc_doc = Value::new(Dictionary)
    struc_doc.insert("id", Value::new_str(`{struc.type:x}`))
    struc_doc.insert("name", Value::new_str(`{struc.sym.name}`))
    if struc.sym.comment? {
        struc_doc.insert("description", Value::new_str(struc.sym.comment))
    }
    if struc.is_union {
        struc_doc.insert("kind", Value::new_str("union"))
    } else {
        struc_doc.insert("kind", Value::new_str("struct"))
    }
    struc_doc.insert("is_templated", Value::new_bool(struc.sym.is_templated()))

    if struc.sym.is_templated() {
        let params_doc = Value::new(List)
        for var : struc.sym.template.params.iter() {
            let name = var.sym.name
            params_doc.push(Value::new_str(name))
        }
        struc_doc.insert("template_params", params_doc)
    }
    if struc.sym.is_extern {
        struc_doc.insert("extern", Value::new_str(struc.sym.out_name))
    } else {
        .gen_location(struc_doc, struc.span)
    }

    let fields_doc = Value::new(List)
    for field : struc.fields.iter() {
        let field_doc = Value::new(Dictionary)
        field_doc.insert("name", Value::new_str(field.sym.name))
        field_doc.insert("type", .gen_typename(field.type))
        if field.sym.comment? {
            field_doc.insert("description", Value::new_str(field.sym.comment))
        }
        if field.sym.is_extern {
            field_doc.insert("extern", Value::new_str(field.sym.out_name))
        }
        fields_doc.push(field_doc)
    }
    struc_doc.insert("fields", fields_doc)

    let methods_doc = .gen_methods(struc.type)
    struc_doc.insert("methods", methods_doc)

    return struc_doc
}

def DocGenerator::gen_ns(&this, ns: &Namespace): &Value {
    let ns_doc = Value::new(Dictionary)
    ns_doc.insert("id", Value::new_str(`{ns:x}`))
    if ns.sym.comment? {
        ns_doc.insert("description", Value::new_str(ns.sym.comment))
    }
    ns_doc.insert("name", Value::new_str(ns.sym.name))
    ns_doc.insert("kind", Value::new_str("namespace"))
    if ns.is_a_file or ns.is_top_level {
        .gen_location(ns_doc, ns.span)
    }

    if not ns.enums.is_empty() {
        let enums_doc = Value::new(Dictionary)
        for enum_ : ns.enums.iter() {
            let enum_doc = .gen_enum(enum_)
            enums_doc.insert(enum_.sym.name, enum_doc)
        }
        ns_doc.insert("enums", enums_doc)
    }

    if not ns.structs.is_empty() {
        let structs_doc = Value::new(Dictionary)
        let unions_doc = Value::new(Dictionary)
        for struc : ns.structs.iter() {
            let struct_doc = .gen_struct(struc)
            if not struc.is_union {
                structs_doc.insert(struc.sym.name, struct_doc)
            } else {
                unions_doc.insert(struc.sym.name, struct_doc)
            }
        }

        if not structs_doc.as_dict().is_empty() {
            ns_doc.insert("structs", structs_doc)
        }
        if not unions_doc.as_dict().is_empty() {
            ns_doc.insert("unions", unions_doc)
        }
    }

    if not ns.variables.is_empty() {
        let vars_doc = Value::new(Dictionary)
        for node : ns.variables.iter() {
            let var = node.u.var_decl.var
            let var_doc = Value::new(Dictionary)
            var_doc.insert("id", Value::new_str(`{var:x}`))
            if var.sym.comment? {
                var_doc.insert("description", Value::new_str(var.sym.comment))
            }
            var_doc.insert("name", Value::new_str(var.sym.name))
            var_doc.insert("kind", Value::new_str("variable"))
            var_doc.insert("type", .gen_typename(var.type))
            .gen_location(var_doc, var.sym.span)
            if var.sym.is_extern {
                var_doc.insert("extern", Value::new_str(var.sym.out_name))
            }
            vars_doc.insert(var.sym.name, var_doc)
        }
        ns_doc.insert("variables", vars_doc)
    }

    if not ns.constants.is_empty() {
        let consts_doc = Value::new(Dictionary)
        for node : ns.constants.iter() {
            let var = node.u.var_decl.var
            let const_doc = Value::new(Dictionary)
            const_doc.insert("id", Value::new_str(`{var:x}`))
            if var.sym.comment? {
                const_doc.insert("description", Value::new_str(var.sym.comment))
            }
            const_doc.insert("name", Value::new_str(var.sym.name))
            const_doc.insert("kind", Value::new_str("constant"))
            const_doc.insert("type", .gen_typename(var.type))
            .gen_location(const_doc, var.sym.span)
            if var.sym.is_extern {
                const_doc.insert("extern", Value::new_str(var.sym.out_name))
            }
            consts_doc.insert(var.sym.name, const_doc)
        }
        ns_doc.insert("constants", consts_doc)
    }

    if not ns.functions.is_empty() {
        let funcs_doc = Value::new(Dictionary)
        for func : ns.functions.iter() {
            if func.is_method {
                continue
            }
            let func_doc = .gen_function(func)
            funcs_doc.insert(func.sym.name, func_doc)
        }
        ns_doc.insert("functions", funcs_doc)
    }

    if not ns.namespaces.is_empty() {
        let namespaces_doc = Value::new(Dictionary)
        for it : ns.namespaces.iter() {
            let ns_doc = .gen_ns(it.value)
            namespaces_doc.insert(it.key, ns_doc)
        }
        ns_doc.insert("namespaces", namespaces_doc)
    }

    return ns_doc
}

def DocGenerator::gen_builtin(&this, type: &Type): &Value {
    let type_doc = Value::new(Dictionary)
    type_doc.insert("id", Value::new_str(`{type:x}`))
    type_doc.insert("name", Value::new_str(`{type.sym.name}`))
    type_doc.insert("description", Value::new_str(`Built-in type {type.sym.name}`))
    type_doc.insert("kind", Value::new_str("builtin"))

    let methods_doc = .gen_methods(type)
    type_doc.insert("methods", methods_doc)

    return type_doc
}

def DocGenerator::gen_builtins(&this, program: &Program): &Value {
    let builtins_doc = Value::new(Dictionary)
    for let i = 0; i < BaseType::NUM_BASE_TYPES as u32; i += 1 {
        let type = program.get_base_type(i as BaseType, Span::default())
        let type_doc = .gen_builtin(type)
        builtins_doc.insert(type.name, type_doc)
    }

    let str_type = program.get_type_by_name("str", Span::default())
    let str_type_doc = .gen_builtin(str_type)
    builtins_doc.insert("str", str_type_doc)

    let untyped_ptr_type = program.get_type_by_name("untyped_ptr", Span::default())
    let untyped_ptr_type_doc = .gen_builtin(untyped_ptr_type)
    builtins_doc.insert("untyped_ptr", untyped_ptr_type_doc)

    return builtins_doc
}

def generate_doc_json(program: &Program, json_path: str) {
    let docs_generator = DocGenerator()

    let docs = docs_generator.gen_ns(program.global)
    let builtins = docs_generator.gen_builtins(program)
    docs.insert("builtins", builtins)

    let container = Value::new(Dictionary)
    container.insert("ocen", docs)

    json::write_to_file(container, json_path)
}