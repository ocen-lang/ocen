//* Miscellaneous utilities

import std::vector::Vector

def strsep(s: &str, delim: str): str extern

def edit_distance(str1: str, str2: str): u32 {
    let n = str1.len()
    let m = str2.len()
    let stride = m + 1

    // The stack _should_ be large enough to hold the entire matrix.
    let d: [[u32; m + 1]; n + 1]

    for let i = 0; i <= n; i += 1 {
        d[i][0] = i
    }
    for let j = 0; j <= m; j += 1 {
        d[0][j] = j
    }
    for let i = 1; i <= n; i += 1 {
        for let j = 1; j <= m; j += 1 {
            let x = d[i - 1][j] + 1
            let y = d[i][j - 1] + 1
            let z = if str1[i - 1] == str2[j - 1] {
                yield d[i - 1][j - 1]
            } else {
                yield d[i - 1][j - 1] + 1
            }
            d[i][j] = x.min(y).min(z)
        }
    }
    let result = d[n][m]
    return result
}

def find_word_suggestion(s: str, options: &Vector<str>): str {
    let threshold = 5 // edit distance threshold

    if options.size == 0 return null

    let closest = options.at(0) as str
    let closest_distance = edit_distance(s, closest)

    for option : options.iter() {
        let distance = edit_distance(s, option)
        if distance < closest_distance {
            closest = option
            closest_distance = distance
        }
    }
    if closest_distance > threshold return null
    return closest
}

@compiler c_include "dirent.h"

struct DIR extern("DIR")
def opendir(path: str): &DIR extern("opendir")
def closedir(dir: &DIR) extern("closedir")

def directory_exists(path: str): bool {
    let dir = opendir(path)
    if dir == null return false
    closedir(dir)
    return true
}