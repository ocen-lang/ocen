//* Contains the structs for the type system.

import @ast::nodes::{ AST, ASTType, Structure, Enum, Variable, Function }
import @ast::scopes::{ Symbol, TemplateInstance }
import @ast::program::Namespace
import std::vector::Vector
import std::map::Map
import std::span::Span
import std::libc::calloc
import @tokens::{ Token, TokenType }

enum BaseType {
    Char
    Bool
    Void
    I8
    I16
    I32
    I64
    U8
    U16
    U32
    U64
    F32
    F64

    //* For convenience, to iterate over all the base types
    NUM_BASE_TYPES

    Pointer
    Function
    Structure
    Enum
    Unresolved
    Array
    Alias
    UnresolvedTemplate

    Error
}

def BaseType::str(this): str => match this {
    Char => "char"
    Bool => "bool"
    Void => "void"
    I8 => "i8"
    I16 => "i16"
    I32 => "i32"
    I64 => "i64"
    U8 => "u8"
    U16 => "u16"
    U32 => "u32"
    U64 => "u64"
    F32 => "f32"
    F64 => "f64"
    else => .dbg()
}

struct FunctionType {
    //* `null` if this is a function pointer
    orig: &Function
    params: &Vector<&Variable>
    return_type: &Type
}

struct ArrayType {
    elem_type: &Type
    size_expr: &AST
}

//* Stores an unresolved template specialization.
//*
//* We have this here for the cases where we can't resolve a template
//* (e.g. when we're parsing a template definition). This is not actually
//* used in the compiler for generating any code, but is helpful for outputting
//* documentation.
struct UnresolvedTemplate {
    base: &Type, // FIXME: Should this be a symbol?
    args: &Vector<&Type>
}


struct TypeUnion {
    ptr: &Type
    struc: &Structure
    enum_: &Enum
    unresolved: &AST
    func: FunctionType
    arr: ArrayType
    unresolved_spec: UnresolvedTemplate
}

struct Type {
    name: str
    base: BaseType
    span: Span
    u: TypeUnion
    methods: &Map<str, &Function>
    sym: &Symbol

    //* This is used for specializations, so that they can point to the original
    //* template instance and the template arguments.
    template_instance: &TemplateInstance
}

def Type::shallow_copy(old: &Type): &Type {
    let new = calloc(1, sizeof(Type)) as &Type
    *new = *old
    return new
}

def Type::new_resolved(base: BaseType, span: Span): &Type {
    let type = calloc(1, sizeof(Type)) as &Type
    type.base = base
    type.span = span
    type.name = base.str()
    type.methods = Map<str, &Function>::new()
    return type
}

def Type::new_unresolved(name: str, span: Span): &Type {
    let type = Type::new_resolved(BaseType::Unresolved, span)
    type.name = name
    return type
}

def Type::new_unresolved_base(base: BaseType, span: Span): &Type {
    let ident = AST::new(ASTType::Identifier, span)
    ident.u.ident.name = base.str()

    let type = Type::new_resolved(BaseType::Unresolved, span)
    type.u.unresolved = ident
    return type
}

def Type::is_integer(&this): bool => match .base {
    I8 | I16 | I32 | I64 |
    U8 | U16 | U32 | U64 => true
    else => false
}

def Type::is_float(&this): bool => .base == BaseType::F32 or .base == BaseType::F64

def Type::is_numeric(&this): bool => match .base {
    I8  | I16 | I32 | I64 |
    U8  | U16 | U32 | U64 |
    F32 | F64 => true
    else => false
}

def Type::is_numeric_or_char(&this): bool => .is_numeric() or .base == BaseType::Char

def Type::can_have_methods(&this): bool => match .base {
    Char | Bool | Void | I8 | I16 | I32 | I64 |
    U8 | U16 | U32 | U64 | F32 | F64 | Structure |
    Enum | Alias => true
    else => false
}

def Type::eq(&this, other: &Type, strict: bool = false): bool {
    if (this == null and other == null) return true
    if (this == null or other == null) return false

    // Aliases are equal to their original type
    if .base == Alias return .u.ptr.eq(other)
    if other.base == Alias return .eq(other.u.ptr)

    if .base != other.base return false

    match .base {
        Error | Unresolved => return false
        Function => {
            let af = .u.func
            let bf = other.u.func
            if not af.return_type.eq(bf.return_type, strict: true) return false
            if af.params.size != bf.params.size return false
            for let i = 0; i < af.params.size; i += 1 {
                let a = af.params.at(i)
                let b = bf.params.at(i)
                if not a.type.eq(b.type, strict: true) return false
            }
            return true
        }
        Pointer => {
            if not strict {
                if .u.ptr.base == BaseType::Void or other.u.ptr.base == BaseType::Void {
                    return true
                }
            }
            return .u.ptr.eq(other.u.ptr, strict: true)
        }
        Structure => return .u.struc == other.u.struc
        Enum => return .u.enum_ == other.u.enum_
        Array => {
            if not .u.arr.elem_type.eq(other.u.arr.elem_type, strict: true) return false
            // FIXME: how do we check the size? It's currently an AST
            return true
        }
        else => {
            if .base as u32 < BaseType::NUM_BASE_TYPES as u32 {
                return true
            }

            assert false, `Unhandled case in Type::eq(), base = {.base}`
        }
    }
}

def Type::is_str(&this): bool {
    return .base == Alias and .sym.out_name.eq("str")
}

def Type::unaliased(&this): &Type {
    if .base != Alias return this
    return .u.ptr.unaliased()
}

def Type::decay_array(&this): &Type {
    if .base != BaseType::Array return this
    let res = Type::new_resolved(BaseType::Pointer, .span)
    res.u.ptr = .u.arr.elem_type
    return res
}

def Type::str(&this): str => match .base {
    Pointer => `&{.u.ptr.str()}`
    Function => "<function>"
    Structure => .u.struc.sym.display
    Enum => .u.enum_.sym.display
    Alias => `{.name}`
    else => .base.str()
}
