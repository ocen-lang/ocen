import std::fs
import std::time
import std::sv::{ SV }
import std::mem
import std::json
import std::value::{ Value }
import std::gc
import std::buffer::{ Buffer }
import std::compact_map::{ Map }
import std::process::{ this, Output }

import @lsp::cli

// TODO: put in stdlib
[extern] def setvbuf(file: &fs::File, buffer: str, mode: i32, size: u64): i32
[extern] const stdin: &fs::File
[extern] const stdout: &fs::File
[extern] const stderr: &fs::File
[extern] const _IONBF: i32
[extern] def fgets(buf: str, size: u32, file: &fs::File): str

def read_message(): str {
    let header: [char; 1024]
    let content_length = 0

    while fgets(header, 1024, stdin)? {
        let sv = SV::from_str(header)
        if sv.starts_with_str("Content-Length: ") {
            sv.chop_by_delim(' ')
            content_length = sv.chop_u32()
        }
        if header[0] == '\n' or header[0] == '\r' {
            break
        }
    }

    if content_length == 0 {
        return null
    }

    let msg = mem::alloc<char>(content_length+1)
    stdin.read(msg, content_length)
    msg[content_length] = '\0'
    return msg
}

def send_message(content: &Value) {
    let content_str = json::serialize(content)
    let header = `Content-Length: {content_str.size}\r\n\r\n`
    stdout.write(header, header.len())
    stdout.write(content_str.str(), content_str.size)
}

def send_response(req: &Value, result: &Value) {
    let response = Value::new_dict(${
        "jsonrpc": Value::new_str("2.0"),
        "id": req["id"],
    })
    if result? {
        response["result"] = result
    } else {
        response["result"] = Value::new(Null)
    }
    send_message(response)
}

def lsp_log(msg: str) {
    send_message(Value::new_dict(${
        "jsonrpc": Value::new_str("2.0"),
        "method": Value::new_str("window/logMessage"),
        "params": Value::new_dict(${
            "type": Value::new_int(4),
            "message": Value::new_str(msg),
        }),
    }))
}

struct Loc {
    row: i32
    col: i32
    uri: SV
    path: SV
}

def get_location(req: &Value): Loc {
    let params = req["params"]
    assert params.is(Dictionary)

    let row = 0i
    let col = 0i
    if params.contains("position") {
        let location = params["position"]
        assert location.is(Dictionary)

        row = location["line"].as_int() as i32
        col = location["character"].as_int() as i32
    }

    let uri = params["textDocument"]["uri"].as_str().sv()
    let path = uri
    path.chop_by_str("file://")

    return Loc(row, col, uri, path)
}

struct TextDocument {
    text: Buffer
}

struct LSPServer {
    documents: ${SV: TextDocument}

    validate_throttle_ms: f64 = 500.0  // Only validate once every 500ms
    last_validated: f64 = 0.0
    to_validate_req: &Value = null
}


def LSPServer::run_lsp_backend_raw(
    &this,
    loc: Loc,
    lsp_cmd: str,
    include_pos: bool = true,
): Output {

    let uri = loc.uri
    let path = loc.path

    let args = $["lsp", lsp_cmd]
    if include_pos {
        args += `{loc.row+1}`
        args += `{loc.col+1}`
    }

    let callback: @fn() = null

    if .documents.contains(uri) {
        let contents = .documents[uri].text.str()
        args += "--show-path"
        args += `{path}`
        callback = || {
            cli::main(args.size as i32, args.data, contents)
        }
    } else {
        args += `{path}`
        callback = || {
            cli::main(args.size as i32, args.data)
        }
    }

    let proc_out = process::get_output(callback: callback)

    if proc_out.error {
        lsp_log(f"Failed to run LSP CLI: {proc_out.error_code}")
        if proc_out.output.size > 0 {
            lsp_log(`Output: {proc_out.output}`)
        }
    }
    return proc_out
}

def LSPServer::run_lsp_backend(
    &this,
    loc: Loc,
    lsp_cmd: str,
    include_pos: bool = true,
): &Value {
    let out = .run_lsp_backend_raw(loc, lsp_cmd, include_pos)
    if out.error or out.output.size == 0 {
        return null
    }
    return json::parse_sv(out.output.sv())
}

def get_range(val: &Value): &Value {
    let start_line = val["start_line"].as_int() - 1
    let start_col = val["start_col"].as_int() - 1
    let end_line = val["end_line"].as_int() - 1
    let end_col = val["end_col"].as_int() - 1

    let range = Value::new_dict(${
        "start": Value::new_dict(${
            "line": Value::new_int(start_line),
            "character": Value::new_int(start_col),
        }),
        "end": Value::new_dict(${
            "line": Value::new_int(end_line),
            "character": Value::new_int(end_col),
        }),
    })
    return range
}

def get_uri(orig_uri: &Value, val: &Value): &Value {
    if not val.contains("file") {
        return orig_uri
    }
    let file = val["file"].as_str()
    return Value::new_str(`file://{file}`)
}

def unescape_buf(buf: &Buffer) {
    let i = 0
    let j = 0

    let s = buf.str()
    while i < buf.size {
        if s[i] == '\\' {
            i++
            // JSON string escape sequences
            match s[i] {
                'n' => s[j++] = '\n'
                'r' => s[j++] = '\r'
                't' => s[j++] = '\t'
                'b' => s[j++] = '\b'
                'f' => s[j++] = '\f'
                '\\' => s[j++] = '\\'
                '"' => s[j++] = '"'
                else => s[j++] = s[i]
            }
            i++
        } else {
            s[j++] = s[i++]
        }
    }
    buf.size = j
    s[j] = '\0'
}

def LSPServer::handle_initialize(&this, req: &Value) {
    let params = req["params"]
    assert params.is(Dictionary)

    let result = Value::new_dict(${
        "capabilities": Value::new_dict(${
            "textDocumentSync": Value::new_int(1),  // Full sync
            "completionProvider": Value::new_dict(${
                "resolveProvider": Value::new_bool(false),
                "triggerCharacters": Value::new_list($[
                    Value::new_str("."),
                    Value::new_str(":"),
                    Value::new_str("@"),
                    Value::new_str(" "),
                ]),
            }),
            "referencesProvider": Value::new_bool(true),
            "definitionProvider": Value::new_bool(true),
            "typeDefinitionProvider": Value::new_bool(true),
            "documentSymbolProvider": Value::new_bool(true),
            "hoverProvider": Value::new_bool(true),
            "renameProvider": Value::new_bool(true),
            "signatureHelpProvider": Value::new_dict(${
            "triggerCharacters": Value::new_list($[
                    Value::new_str("("),
                    Value::new_str(","),
                ]),
            }),
        }),
    })
    send_response(req, result)
}

[extern "i64"]
enum DiagnosticSeverity {
    Error   = extern("1")
    Warning = extern("2")
    Information = extern("3")
    Hint = extern("4")
}

def LSPServer::handle_validate_document(&this) {
    if not .to_validate_req? return

    let req = .to_validate_req

    // TODO: Implement throttle, the version below doesn't work:
    //       In single threaded mode this function is only called at the
    //       end of every LSP request. If we "miss" one because of a timeout,
    //       the next validate won't be called unless a user changes the file,
    //       which causes the errors to be unsynced with the file.

    let cur_time = time::get_time_monotonic_ms()
    if cur_time - .last_validated < .validate_throttle_ms {
        return
    }

    let loc = get_location(req)
    let out = .run_lsp_backend_raw(loc, "--validate", include_pos: false)

    if out.error return

    let diagnostics = Value::new(List)
    for line in out.output.sv().lines() {
        let out = json::parse_sv(line)
        // TODO: Support other types
        let severity = DiagnosticSeverity::Error

        let res = Value::new_dict(${
            "message": out["message"],
            "range": get_range(out["span"]),
            "severity": Value::new_int(severity as i64),
        })

        if out.contains("extra_info") {
            let extra_info = out["extra_info"]
            let orig_uri = req["params"]["textDocument"]["uri"]
            res["relatedInformation"] = Value::new_dict(${
                "location": Value::new_dict(${
                    "uri": get_uri(orig_uri, extra_info),
                    "range": get_range(extra_info["span"]),
                }),
                "message": out["extra_info"]["message"],
            })
        }
        diagnostics += res
    }

    let message = Value::new_dict(${
        "jsonrpc": Value::new_str("2.0"),
        "method": Value::new_str("textDocument/publishDiagnostics"),
        "params": Value::new_dict(${
            "uri": req["params"]["textDocument"]["uri"],
            "diagnostics": diagnostics,
        }),
    })
    send_message(message)

    .to_validate_req = null
    .last_validated = time::get_time_monotonic_ms()
}


def LSPServer::handle_hover(&this, req: &Value) {
    lsp_log("Handling hover request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "-h", include_pos: true)

    if not cli_out? {
        send_response(req, null)
        return
    }

    let result = Value::new_dict(${
        "contents": Value::new_list($[
            Value::new_dict(${
                "language": Value::new_str("ocen"),
                "value": cli_out["hover"],
            }),
        ]),
    })
    send_response(req, result)
}

def LSPServer::handle_definition(&this, req: &Value) {
    lsp_log("Handling definition request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "-d", include_pos: true)

    if not cli_out? {
        send_response(req, null)
        return
    }
    let result = Value::new_dict(${
        "uri": get_uri(req["params"]["textDocument"]["uri"], cli_out),
        "range": get_range(cli_out),
    })
    send_response(req, result)
}

def LSPServer::handle_type_definition(&this, req: &Value) {
    lsp_log("Handling type_definition request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "-t", include_pos: true)

    if not cli_out? {
        send_response(req, null)
        return
    }
    let result = Value::new_dict(${
        "uri": get_uri(req["params"]["textDocument"]["uri"], cli_out),
        "range": get_range(cli_out),
    })
    send_response(req, result)
}

def LSPServer::handle_references(&this, req: &Value) {
    lsp_log("Handling references request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "-r", include_pos: true)

    let result = Value::new(List)
    if cli_out? {
        for ref in cli_out.as_list().iter() {
            result += Value::new_dict(${
                "uri": get_uri(req["params"]["textDocument"]["uri"], ref),
                "range": get_range(ref),
            })
        }
    }

    send_response(req, result)
}

def LSPServer::handle_rename(&this, req: &Value) {
    lsp_log("Handling rename request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "--renames", include_pos: true)

    if not cli_out? {
        send_response(req, null)
        return
    }

    let changes = Value::new(Dictionary)
    let newText = req["params"]["newName"]

    // TODO: Check name and error if invalid

    for obj in cli_out.as_list().iter() {
        let uri = get_uri(req["params"]["textDocument"]["uri"], obj)
        let uri_str = uri.as_str().str()
        if not changes.contains(uri_str) {
            changes[uri_str] = Value::new(List)
        }
        changes[uri_str] += Value::new_dict(${
            "range": get_range(obj),
            "newText": newText,
        })
    }

    let result = Value::new_dict(${
        "changes": changes,
    })
    send_response(req, result)
}

def LSPServer::handle_signature_help(&this, req: &Value) {
    lsp_log("Handling signature_help request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "-s", include_pos: true)

    if not cli_out? or cli_out.as_dict().size() == 0 {
        send_response(req, null)
        return
    }

    send_response(req, cli_out)
}

[extern "i32"]
enum LSPSymbolKind {
    File          = extern("1")
    Module        = extern("2")
    Namespace     = extern("3")
    Package       = extern("4")
    Class         = extern("5")
    Method        = extern("6")
    Property      = extern("7")
    Field         = extern("8")
    Constructor   = extern("9")
    Enum          = extern("10")
    Interface     = extern("11")
    Function      = extern("12")
    Variable      = extern("13")
    Constant      = extern("14")
    String        = extern("15")
    Number        = extern("16")
    Boolean       = extern("17")
    Array         = extern("18")
    Object        = extern("19")
    Key           = extern("20")
    Null          = extern("21")
    EnumMember    = extern("22")
    Struct        = extern("23")
    Event         = extern("24")
    Operator      = extern("25")
    TypeParameter = extern("26")
}

def LSPServer::symbol_def_obj(&this, obj: &Value): &Value {
    let kind: LSPSymbolKind = match obj["kind"] {
        "namespace" => Namespace,
        "function" => Function,
        "method" => Method,
        "struct" => Struct,
        "class" => Class,
        "enum" => Enum,
        "variable" => Variable,
        "enum-member" => EnumMember,
        else => Variable,
    }
    let children = Value::new(List)
    if obj.contains("children") {
        for child in obj["children"].as_list().iter() {
            children += .symbol_def_obj(child)
        }
    }
    return Value::new_dict(${
        "name": obj["name"],
        "detail": obj["detail"],
        "kind": Value::new_int(kind as i64),
        "range": get_range(obj["range"]),
        "selectionRange": get_range(obj["selection_range"]),
        "children": children,
    })
}

def LSPServer::handle_on_document_symbols(&this, req: &Value) {
    lsp_log("Handling document_symbols request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "--doc-symbols", include_pos: false)

    if not cli_out? {
        send_response(req, null)
        return
    }

    let results = Value::new(List)
    for obj in cli_out.as_list().iter() {
        results += .symbol_def_obj(obj)
    }

    send_response(req, results)
}

def LSPServer::handle_did_open(&this, req: &Value) {
    lsp_log("Handling textDocument/didOpen request\n");
    let params = req["params"]
    let uri = params["textDocument"]["uri"].as_str()
    lsp_log(`[SERVER] Opening document: {uri}\n`);
    assert params.is(Dictionary)

    let text = params["textDocument"]["text"].as_str()
    let document = TextDocument(text)
    unescape_buf(&text)
    .documents[uri.sv()] = document

    .to_validate_req = req
}

def LSPServer::handle_did_change(&this, req: &Value) {
    lsp_log("Handling textDocument/didChange request\n");
    let params = req["params"]
    let uri = params["textDocument"]["uri"].as_str()
    lsp_log(`[SERVER] Changing document: {uri}\n`);
    assert params.is(Dictionary)

    let changes = params["contentChanges"].as_list()
    assert changes.size == 1
    let text = params["contentChanges"][0]["text"].as_str()
    unescape_buf(&text)
    .documents[uri.sv()] = TextDocument(text)

    .to_validate_req = req
}

def LSPServer::handle_did_close(&this, req: &Value) {
    lsp_log("Handling textDocument/didClose request\n");
    let params = req["params"]
    let uri = params["textDocument"]["uri"].as_str()
    lsp_log(`[SERVER] Closing document: {uri}\n`);
    assert params.is(Dictionary)

    .documents.remove(uri.sv())
}

def LSPServer::handle_completion(&this, req: &Value) {
    lsp_log("Handling completion request\n");

    let loc = get_location(req)
    let cli_out = .run_lsp_backend(loc, "-c", include_pos: true)

    let completions = Value::new(List)
    if cli_out? {
        let index = 1i64
        let cli_list = cli_out["completions"].as_list()
        for comp in cli_list.iter() {
            completions += Value::new_dict(${
                "label": comp["label"],
                "insertText": comp["insertText"],
                "detail": comp["detail"],
                "insertTextFormat": Value::new_int(2),  // Snippet
                "kind": match comp["kind"] {
                    "function" => Value::new_int(3), // Function
                    "field"    => Value::new_int(5), // Field
                    else       => Value::new_int(1), // Text
                },
                "data": Value::new_int(index++),
                "labelDetails": if {
                    comp.contains("labelDetails") => Value::new_dict(${
                        "detail": comp["labelDetails"],
                    }),
                    else => Value::new(Null)
                },
                "documentation": if {
                    comp.contains("documentation") => comp["documentation"],
                    else => Value::new(Null)
                },
            })
        }
    }

    send_response(req, completions)
}

def LSPServer::handle_shutdown(&this, req: &Value) {
    lsp_log("Handling shutdown request\n");
    let response = Value::new_dict(${
        "jsonrpc": Value::new_str("2.0"),
        "id": req["id"],
        "result": Value::new(Null),
    })
    send_message(response)
}

def LSPServer::handle_initialized(&this, req: &Value) {
    lsp_log("Handling initialzed request\n");
    // Noop
}

def LSPServer::handle_request(&this, ): bool {
    let message = read_message()
    defer mem::free(message)

    if not message? {
        lsp_log("Failed to read message\n");
        return false
    }

    let data = json::parse(message)

    if not (
        data.is(Dictionary) and
        data.as_dict().contains("method") and
        data["method"].is(String)
    ) {
        lsp_log("Invalid message format");
        return false
    }

    let method = data["method"].as_str().sv()
    match method {
        "initialize"                  => .handle_initialize(data)
        "initialized"                 => .handle_initialized(data)
        "textDocument/hover"          => .handle_hover(data)
        "textDocument/didOpen"        => .handle_did_open(data)
        "textDocument/didChange"      => .handle_did_change(data)
        "textDocument/didClose"       => .handle_did_close(data)
        "textDocument/completion"     => .handle_completion(data)
        "textDocument/definition"     => .handle_definition(data)
        "textDocument/typeDefinition" => .handle_type_definition(data)
        "textDocument/references"     => .handle_references(data)
        "textDocument/signatureHelp"  => .handle_signature_help(data)
        "textDocument/documentSymbol" => .handle_on_document_symbols(data)
        "textDocument/rename"         => .handle_rename(data)
        "shutdown"                    => .handle_shutdown(data)
        "exit"                        => return false
        // onclose

        else => {
            lsp_log(f"-----------------------------------------");
            lsp_log(f"[SERVER] Unknown method: {method}");
            lsp_log(f"-----------------------------------------");
        }
    }

    return true
}

def main_loop() {
    let lsp = @new LSPServer(
        documents: ${}
    )

    while true {
        defer {
            gc::collect()
            gc::print_stats()
        }

        // TODO: don't error, just continue
        if not lsp.handle_request() {
            break
        }

        // Only runs if a document was opened or changed, once every 500ms
        lsp.handle_validate_document()
    }
}


def main(argc: i32, argv: &str): i32 {
    gc::init(&argv)

    setvbuf(stdin, null, _IONBF, 0)
    setvbuf(stdout, null, _IONBF, 0)

    main_loop()

    gc::shutdown()
    return 0
}