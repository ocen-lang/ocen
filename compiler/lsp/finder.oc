//! Traverse the AST to find the first node occuring at
//! a given source code location.

import std::buffer::Buffer
import std::span::{ Span, Location }
import std::vector::Vector
import std::{ panic, exit }
import std::fs

import @lexer::Lexer
import @parser::Parser
import @passes::{ run_typecheck_passes }
import @ast::nodes::*
import @ast::program::*
import @ast::scopes::*
import @types::*
import .utils::{ verbose }

// Namespace thing again
struct Finder {
    cmd: CommandType
    loc: Location // Location we are looking for

    found_sym: &Symbol

    //! What was the node that we found the symbol in?
    found_node: &AST
    //! What scope was the symbol found in?
    found_scope: &Scope
    //! If this was an import, what namespace was it in?
    found_import_ns: &Namespace

    // For SignatureHelp
    active_param: u32
    call: &AST

    scopes: &Vector<&Scope>
}

def Finder::make(cmd: CommandType, loc: Location): Finder {
    let finder: Finder
    finder.cmd = cmd
    finder.loc = loc
    finder.scopes = Vector<&Scope>::new()
    return finder
}

def Finder::find_in_identifier(&this, node: &AST): bool {
    let ident = &node.u.ident
    if node.span.contains_loc(.loc) {
        return .set_usage(node.resolved_symbol, node)
    }
    return false
}

def Finder::find_in_var(&this, var: &Variable, node: &AST): bool {
    if var.sym.span.contains_loc(.loc) {
        return .set_usage(var.sym, node)
    }
    if var.parsed_type? and .find_in_type(var.parsed_type) {
        return true
    }
    return false
}

def Finder::set_usage(&this, sym: &Symbol, node: &AST): bool {
    .found_sym = sym
    .found_node = node

    assert .scopes.size > 0, "No scopes to set" // Shouldn't happen
    .found_scope = .scopes.back()

    // If we're looking for completions - it's possible we don't have a resolved symbol
    // but that's OK - we just care about suggesting names in the current scope.
    if .cmd == Completions {
        return true
    }
    return sym?
}

def Finder::find_in_literal(&this, node: &AST): bool {
    if node.span.contains_loc(.loc) {
        // FIXME: Properly set the literal type
        if node.etype? {
            return .set_usage(node.etype.sym, node)
        }
    }
    // TODO: check type
    return false
}

def Finder::find_signature_help(&this, node: &AST, args: &Vector<&Argument>, param_idx: u32): bool {
    if .cmd != CommandType::SignatureHelp return false
    if not node.span.contains_loc(.loc) return false

    let func = node.u.call.callee.resolved_symbol
    if not func? or func.type != Function return false
    let func_sym = func.u.func.sym

    let params = func.u.func.params
    if param_idx > params.size return false

    if {
        (param_idx == 0) => {
            let open_paren_span = node.u.call.open_paren_span
            open_paren_span.end.col += 1  // Include room for the next char
            if open_paren_span.contains_loc(.loc) {
                .active_param = 0
                .call = node
                return true
            }
        }
        else => {
            let prev_arg = args.at(param_idx - 1)
            let arg_span = if {
                prev_arg.label? => prev_arg.label_span.join(prev_arg.expr.span)
                else => prev_arg.expr.span
            }
            if arg_span.contains_loc(.loc) {
                .active_param = param_idx - 1
                .call = node
                return true
            }
            let close_paren_span = node.u.call.close_paren_span
            let mid_span = Span(arg_span.end, close_paren_span.start)
            if mid_span.contains_loc(.loc) {
                .active_param = param_idx
                .call = node
                return true
            }
        }
    }
    return false
}

def Finder::find_in_call_args(&this, node: &AST, args: &Vector<&Argument>): bool {
    // Do this first, since if we are in a signature help context, we don't care about the rest
    if .find_signature_help(node, args, args.size) return true

    for let i = 0; i < args.size; i += 1 {
        let arg = args.at(i)
        if arg.label_span.contains_loc(.loc) {
            if verbose then println("TODO: set usage for Finder::find_in_call_args label span")
            return true
        }
        if .find_in_expression(arg.expr) return true
    }
    return false
}

def Finder::find_in_expression(&this, node: &AST): bool {
    match node.type {
        IntLiteral | FloatLiteral | BoolLiteral |
        StringLiteral | CharLiteral |
        Null => return .find_in_literal(node)

        FormatStringLiteral => {
            let fmt = &node.u.fmt_str
            for let i = 0; i < fmt.exprs.size; i += 1 {
                if .find_in_expression(fmt.exprs.at(i)) return true
            }
            return .find_in_literal(node)
        }

        Identifier => return .find_in_identifier(node)
        Member => {
            let rhs = node.u.member.rhs_name
            // This is usually for autocompletion:
            if not rhs? and .cmd == Completions and node.span.contains_loc(.loc) {
                return .set_usage(node.u.member.lhs.resolved_symbol, node)
            }

            if .find_in_expression(node.u.member.lhs) return true
            if node.u.member.rhs_span.contains_loc(.loc) {
                return .set_usage(node.resolved_symbol, node)
            }
        }
        NSLookup => {
            // We actually want to point to the type, not the variable
            if .find_in_expression(node.u.lookup.lhs) return true

            // This is usually for autocompletion:
            let rhs = node.u.member.rhs_name
            if not rhs? and node.span.contains_loc(.loc) {
                let res = .set_usage(node.u.member.lhs.resolved_symbol, node)
                return res
            }

            if node.u.member.rhs_span.contains_loc(.loc) {
                return .set_usage(node.resolved_symbol, node)
            }
        }
        BinaryOp => {
            let lhs = node.u.binary.lhs
            let rhs = node.u.binary.rhs
            return .find_in_expression(lhs) or .find_in_expression(rhs)
        }
        UnaryOp => return .find_in_expression(node.u.unary.expr)
        Defer | Yield => return .find_in_expression(node.u.child)
        Call => {
            let call = &node.u.call
            if .find_in_expression(call.callee) return true
            if .find_in_call_args(node, call.args) return true
        }
        Cast => {
            if .find_in_expression(node.u.cast.lhs) return true
            return .find_in_type(node.u.cast.to)
        }
        SizeOf => return .find_in_type(node.u.size_of_type)
        If => {
            let stmt = &node.u.if_stmt
            for branch in stmt.branches.iter() {
                if .find_in_expression(branch.cond) return true
                if .find_in_statement(branch.body) return true
            }
            if stmt.els? and .find_in_statement(stmt.els) return true
        }
        Match => {
            let stmt = &node.u.match_stmt
            if .find_in_expression(stmt.expr) return true
            for let i = 0; i < stmt.cases.size; i += 1 {
                let case_ = stmt.cases.at(i) as &MatchCase
                if .find_in_expression(case_.cond) return true
                if case_.body? and .find_in_statement(case_.body) return true
            }
            if stmt.defolt? and .find_in_statement(stmt.defolt) return true
        }
        Break | Continue => {}
        Assert => return .find_in_expression(node.u.assertion.expr)
        Specialization => {
            let spec = &node.u.spec
            if .find_in_expression(spec.base) return true
            for ty : spec.parsed_template_args.iter() {
                if .find_in_type(ty) return true
            }
        }
        Block => return .find_in_block(node)
        OverloadedOperator => {
            let op_span = node.u.operator_span
            if op_span.contains_loc(.loc) {
                return .set_usage(node.resolved_symbol, node)
            }
        }

        else => {
            if verbose println("Unhandled node type in Finder::find_in_expression: %s", node.type)
        }
    }
    return false
}

def Finder::find_in_import_part(&this, base: &Symbol, part: &ImportPart, node: &AST): bool => match part.type {
    Single => {
        if part.span.contains_loc(.loc) {
            return .set_usage(part.resolved_symbol, node)
        }
        return false
    }
    Multiple => {
        let multi = &part.u.multiple
        for subpath : multi.paths.iter() {
            let prev = base
            for subpart : subpath.iter() {
                if .find_in_import_part(prev, subpart, node) {
                    if prev? and prev.type == Namespace {
                        .found_import_ns = prev.u.ns
                    }
                    return true
                }
                prev = subpart.resolved_symbol
            }
        }
        let multi_span = multi.open_curly_span.join(multi.close_curly_span)
        if multi_span.contains_loc(.loc) {
            .set_usage(null, node)
            if base? and base.type == Namespace {
                .found_import_ns = base.u.ns
            }
            return true
        }
        return false
    }
    Wildcard => false
}

def Finder::find_in_statement(&this, node: &AST): bool {
    match node.type {
        While | For => {
            let loop = &node.u.loop
            if loop.init? and .find_in_statement(loop.init) return true
            if loop.cond? and .find_in_expression(loop.cond) return true
            if loop.step? and .find_in_expression(loop.step) return true
            if loop.body? and .find_in_statement(loop.body) return true
        }
        VarDeclaration => {
            let decl = &node.u.var_decl
            if decl.var? and .find_in_var(decl.var, node) return true
            if decl.init? and .find_in_expression(decl.init) return true
        }
        Block => return .find_in_block(node)
        Return => return node.u.child? and .find_in_expression(node.u.child)
        Import => {
            let path = node.u.import_path
            let prev = path.root_sym
            for part : path.parts.iter() {
                if .find_in_import_part(prev, part, node) {
                    if prev? and prev.type == Namespace {
                        .found_import_ns = prev.u.ns
                    }
                    return true
                }
                prev = part.resolved_symbol
            }
        }
        else => return .find_in_expression(node)
    }
    return false
}

def Finder::find_in_block(&this, node: &AST): bool {
    .scopes.push(node.u.block.scope)
    let stmts = node.u.block.statements
    for let i = 0; i < stmts.size; i += 1 {
        if .find_in_statement(stmts.at(i)) return true
    }
    .scopes.pop()
    return false
}

def Finder::find_in_type(&this, type: &Type): bool {
    match type.base {
        Pointer => return .find_in_type(type.u.ptr)
        Array => {
            if type.u.arr.size_expr? and .find_in_expression(type.u.arr.size_expr) return true
            return .find_in_type(type.u.arr.elem_type)
        }
        Unresolved => return .find_in_expression(type.u.unresolved)
        UnresolvedTemplate => {
            let spec = type.u.unresolved_spec
            if .find_in_type(spec.base) return true
            for ty : spec.args.iter() {
                if .find_in_type(ty) return true
            }
        }
        else => {
            // FIXME: be more robust
            if type.span.contains_loc(.loc) {
                return .set_usage(type.sym, node: null) // FIXME: What should be the node here?
            }
        }
    }
    return false
}

def Finder::find_in_function(&this, func: &Function): bool {
    // If this is a template instance, we skip checking it at all.
    // The original template (which should be checked separately) will
    // have the same span as this instance, and is what we are looking for.
    if func.is_template_instance() return false

    if func.sym.span.contains_loc(.loc) {
        return .set_usage(func.sym, node: null)
    }
    if .find_in_expression(func.name_ast) return true

    .scopes.push(func.scope)
    for param : func.params.iter() {
        if .find_in_var(param, node: null) return true
    }

    let ret_type = func.parsed_return_type
    if ret_type? and .find_in_type(ret_type) return true

    let res = func.body? and .find_in_statement(func.body)
    .scopes.pop()

    return res
}

def Finder::find_in_program(&this, ns: &Namespace): bool {
    .scopes.push(ns.scope)

    for struc : ns.structs.iter() {
        // If this is a template instance, we skip checking it at all.
        // The original template (which should be checked separately) will
        // have the same span as this instance, and is what we are looking for.
        if struc.type? and struc.type.template_instance? continue

        if struc.sym.span.contains_loc(.loc) return .set_usage(struc.sym, node: null)
        for field : struc.fields.iter() {
            if .find_in_var(field, node: null) return true
        }
    }

    for enm : ns.enums.iter() {
        if enm.sym.span.contains_loc(.loc) return .set_usage(enm.sym, node: null)
        for field : enm.fields.iter() {
            if .find_in_var(field, node: null) return true
        }
    }

    for func : ns.functions.iter() {
        if func.sym.span.contains_loc(.loc) return .set_usage(func.sym, node: null)
        if .find_in_function(func) return true
    }

    for import_ : ns.imports.iter() {
        if .find_in_statement(import_) return true
    }

    .scopes.pop()

    for child : ns.namespaces.iter_values() {
        if child.sym.span.contains_loc(.loc) return .set_usage(child.sym, node: null)
        if .find_in_program(child) return true
    }

    return false
}

def Finder::find(&this, program: &Program): bool {
    .scopes.push(program.global.scope)
    return .find_in_program(program.global)
}