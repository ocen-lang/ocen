//! Generate the JSON responses for the LSP server.

import std::value::{ Value }
import std::buffer::Buffer
import std::span::{ Span, Location }

import @ast::nodes::*
import @ast::program::*
import @ast::scopes::*
import @types::*
import @errors::{ Error }

let verbose: bool = false

def gen_type_string(type: &Type, full: bool = true): str => match type.base {
    Char | Bool | Void | I8 | I16 | I32 | I64 | U8 | U16 | U32 | U64 | F32 | F64 => type.base.str()
    Pointer => match type.u.ptr.base {
        Void => "untyped_ptr"
        Char => "str"
        else => `&{gen_type_string(type.u.ptr, full)}`
    }
    Array => `&{gen_type_string(type.u.arr.elem_type, full)}`
    Structure | Enum | Alias => {
        if full return type.sym.display
        if not type.template_instance? return type.sym.name

        let instance = type.template_instance
        let sb = Buffer::make()
        sb.puts(instance.parent.name)
        sb.puts("<")
        for let i = 0; i < instance.args.size; i += 1 {
            if i > 0 {
                sb.puts(", ")
            }
            sb.puts(gen_type_string(instance.args.at(i), full: false))
        }
        sb.puts(">")
        yield sb.str()
    }
    Function => {
        let sb = Buffer::make()
        let func_type = type.u.func
        let is_non_static_method = false

        if func_type.orig? {
            if func_type.orig.is_method {
                is_non_static_method = not func_type.orig.is_static
            }
            sb.puts(func_type.orig.sym.display)
        } else {
            sb.puts("fn")
        }
        sb.puts("(")
        for let i = 0; i < func_type.params.size; i += 1 {
            let param = func_type.params.at(i)
            if i > 0 {
                sb.puts(", ")
            }

            if i == 0 and is_non_static_method {
                if not param.type.name? {
                    sb.puts("&")
                }
                sb.puts("this")
            } else {
                if not param.sym.name.eq("") {
                    sb.puts(param.sym.name)
                    sb.puts(": ")
                }
                sb.puts(gen_type_string(param.type, full: false))
            }
        }
        if func_type.is_variadic {
            if func_type.params.size > 0 {
                sb.puts(", ")
            }
            sb.puts("...")
        }
        sb.puts(")")
        if func_type.return_type.base != BaseType::Void {
            sb.puts(": ")
            sb.puts(gen_type_string(func_type.return_type, full: false))
        }
        yield sb.str()
    }
    Unresolved => {
        let unres = type.u.unresolved
        yield match unres.type {
            Identifier => unres.u.ident.name
            else => "<unresolved>"
        }
    }
    UnresolvedTemplate => {
        let unres = type.u.unresolved_spec
        let sb = Buffer::make()
        sb.puts(gen_type_string(unres.base, full))
        sb.puts("<")
        for let i = 0; i < unres.args.size; i += 1 {
            if i > 0 {
                sb.puts(", ")
            }
            sb.puts(gen_type_string(unres.args.at(i), full: false))
        }
        sb.puts(">")
        yield sb.str()
    }
    Error | NUM_BASE_TYPES => "ERROR"
}

def gen_hover_string(sym: &Symbol): str => match sym.type {
    TypeDef => gen_type_string(sym.u.type_def)
    Function => gen_type_string(sym.u.func.type)
    Variable => {
        let sb = Buffer::make()
        sb.puts(sym.display)
        sb.puts(": ")
        sb.puts(gen_type_string(sym.u.var.type))
        yield sb.str()
    }
    Constant => {
        let sb = Buffer::make()
        sb.puts("const ")
        sb.puts(sym.display)
        sb.puts(": ")
        sb.puts(gen_type_string(sym.u.var.type))
        yield sb.str()
    }
    Enum | Namespace | Structure => sym.display
}

def get_symbol_typedef(sym: &Symbol): &Type => match sym.type {
    TypeDef => sym.u.type_def
    Function => sym.u.func.type
    Variable => sym.u.var.type
    Constant => sym.u.var.type
    Enum => sym.u.enum_.type
    Structure => sym.u.struc.type
    Namespace => null
}

def gen_error_json(err: &Error): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("severity", Value::new_str("Error"))
    obj.insert("span", gen_span_json(err.span1))
    obj.insert("message", Value::new_str(err.msg1))
    return obj
}

def gen_span_json(span: Span): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("start_line", Value::new_int(span.start.line as i64))
    obj.insert("start_col", Value::new_int(span.start.col as i64))
    obj.insert("end_line", Value::new_int(span.end.line as i64))
    obj.insert("end_col", Value::new_int(span.end.col as i64))
    return obj
}

def gen_span_json_with_filename(span: Span, search_loc: Location): &Value {
    let obj = gen_span_json(span)
    if not span.start.filename.eq(search_loc.filename) {
        obj.insert("file", Value::new_str(span.start.filename))
    }
    return obj
}

def gen_hover_json(sym: &Symbol): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("hover", Value::new_str(gen_hover_string(sym)))
    return obj
}

def gen_type_methods_into(obj: &Value, type: &Type) {
    if not type? or not type.methods? return
    for it : type.methods.iter() {
        let func = it.value
        let func_doc = Value::new(Dictionary)
        func_doc.insert("name", Value::new_str(it.key))
        func_doc.insert("kind", Value::new_str("method"))
        func_doc.insert("range", gen_span_json(func.sym.span))
        func_doc.insert("selection_range", gen_span_json(func.sym.span))
        func_doc.insert("children", Value::new(List))
        obj.push(func_doc)
    }
}

def gen_enum_json(enum_: &Enum): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("name", Value::new_str(enum_.sym.name))
    obj.insert("kind", Value::new_str("enum"))
    obj.insert("range", gen_span_json(enum_.sym.span))
    obj.insert("selection_range", gen_span_json(enum_.sym.span))

    let children = Value::new(List)
    for member : enum_.fields.iter() {
        let member_obj = Value::new(Dictionary)
        member_obj.insert("name", Value::new_str(member.sym.name))
        member_obj.insert("kind", Value::new_str("enum-member"))
        member_obj.insert("range", gen_span_json(member.sym.span))
        member_obj.insert("selection_range", gen_span_json(member.sym.span))
        member_obj.insert("children", Value::new(List))
        children.push(member_obj)
    }
    gen_type_methods_into(children, enum_.type)
    obj.insert("children", children)

    return obj
}

def gen_struct_json(struc: &Structure): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("name", Value::new_str(struc.sym.name))
    obj.insert("kind", Value::new_str("struct"))
    obj.insert("range", gen_span_json(struc.sym.span))
    obj.insert("selection_range", gen_span_json(struc.sym.span))

    let children = Value::new(List)
    gen_type_methods_into(children, struc.type)
    obj.insert("children", children)

    return obj
}

def gen_variable_json(var: &Variable): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("name", Value::new_str(var.sym.name))
    obj.insert("kind", Value::new_str("variable"))
    obj.insert("range", gen_span_json(var.sym.span))
    obj.insert("selection_range", gen_span_json(var.sym.span))
    obj.insert("children", Value::new(List))
    return obj
}

def gen_function_json(func: &Function): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("name", Value::new_str(func.sym.name))
    obj.insert("kind", Value::new_str("function"))
    obj.insert("range", gen_span_json(func.sym.span))
    obj.insert("selection_range", gen_span_json(func.sym.span))
    obj.insert("children", Value::new(List))
    return obj
}

def gen_namespace_json(ns: &Namespace): &Value {
    let obj = Value::new(Dictionary)
    obj.insert("name", Value::new_str(ns.sym.name))
    obj.insert("kind", Value::new_str("namespace"))
    obj.insert("range", gen_span_json(ns.sym.span))
    obj.insert("selection_range", gen_span_json(ns.span))

    let children = Value::new(List)
    for enum_ : ns.enums.iter() {
        children.push(gen_enum_json(enum_))
    }

    for struc : ns.structs.iter() {
        children.push(gen_struct_json(struc))
    }

    for var : ns.variables.iter() {
        children.push(gen_variable_json(var.u.var_decl.var))
    }

    for var : ns.constants.iter() {
        children.push(gen_variable_json(var.u.var_decl.var))
    }

    for func : ns.functions.iter() {
        if func.is_method continue
        children.push(gen_function_json(func))
    }

    for it : ns.namespaces.iter_values() {
        children.push(gen_namespace_json(it))
    }

    obj.insert("children", children)
    return obj
}

def gen_completion_from_symbol(sym: &Symbol): &Value {
    let val = Value::new(Dictionary)
    val.insert("label", Value::new_str(sym.name))
    val.insert("detail", Value::new_str(gen_hover_string(sym)))

    // TODO: other types?
    match sym.type {
        Function => {
            val.insert("insertText", Value::new_str(`{sym.name}($1)`))
            val.insert("kind", Value::new_str("function"))
        }
        else => {
            val.insert("insertText", Value::new_str(sym.name))
            val.insert("kind", Value::new_str("field"))
        }
    }
    return val
}

def gen_completions_json(sym: &Symbol, ns_lookup: bool = false): &Value {
    let completions = Value::new(List)

    match sym.type {
        Structure => {
            if not ns_lookup {
                for field : sym.u.struc.fields.iter() {
                    completions.push(gen_completion_from_symbol(field.sym))
                }
            }
            for mth : sym.u.struc.type.methods.iter_values() {
                completions.push(gen_completion_from_symbol(mth.sym))
            }
        }
        TypeDef => {
            for mth : sym.u.type_def.methods.iter_values() {
                completions.push(gen_completion_from_symbol(mth.sym))
            }
        }
        Enum => {
            if ns_lookup {
                for field : sym.u.enum_.fields.iter() {
                    completions.push(gen_completion_from_symbol(field.sym))
                }
            }
            for mth : sym.u.enum_.type.methods.iter_values() {
                completions.push(gen_completion_from_symbol(mth.sym))
            }
        }
        Variable => {
            let typ = get_symbol_typedef(sym)
            if typ? and not typ.can_have_methods() and typ.base == Pointer {
                typ = typ.u.ptr
            }
            if typ? and typ.sym? {
                return gen_completions_json(typ.sym, ns_lookup: false)
            }
        }
        Namespace => {
            for it : sym.u.ns.namespaces.iter_values() {
                completions.push(gen_completion_from_symbol(it.sym))
            }
            for it : sym.u.ns.enums.iter() {
                completions.push(gen_completion_from_symbol(it.sym))
            }
            for it : sym.u.ns.structs.iter() {
                completions.push(gen_completion_from_symbol(it.sym))
            }
            for it : sym.u.ns.variables.iter() {
                if it.resolved_symbol? {
                    completions.push(gen_completion_from_symbol(it.resolved_symbol))
                }
            }
            for it : sym.u.ns.constants.iter() {
                if it.resolved_symbol? {
                    completions.push(gen_completion_from_symbol(it.resolved_symbol))
                }
            }
            for it : sym.u.ns.functions.iter() {
                if not it.is_method {
                    completions.push(gen_completion_from_symbol(it.sym))
                }
            }
        }
        else => {
            // println(f"gen_completions_json: unhandled symbol type: {sym.type}")
        }
    }

    let obj = Value::new(Dictionary)
    obj.insert("completions", completions)
    return obj
}