//! Generate the JSON responses for the LSP server.

import std::value::{ Value }
import std::buffer::Buffer
import std::vector::Vector
import std::set::Set
import std::sv::SV
import std::span::{ Span, Location }

import @ast::nodes::*
import @ast::program::*
import @ast::scopes::*
import @types::*
import @errors::{ Error }

let verbose: bool = false

def gen_func_param_string(i: u32, param: &Variable, is_non_static_method: bool): str {
    let sb = Buffer::make()
    if i == 0 and is_non_static_method {
        if param.type.base == Pointer {
            sb += "&"
        }
        sb += "this"
    } else {
        if not param.sym.name.eq("") {
            sb += param.sym.name
            sb += ": "
        }
        sb += gen_type_string(param.type, full: false)
    }

    if param.default_value? {
        let expr_str = try_gen_expr_string(param.default_value)
        if expr_str? {
            sb += " = "
            sb += expr_str
        }
    }
    return sb.str()
}

def gen_template_params(args: &Vector<&Type>): str {
    let sb = Buffer::make()

    sb += "<"
    for let i = 0; i < args.size; i += 1 {
        if i > 0 {
            sb += ", "
        }
        sb += gen_type_string(args.at(i), full: false)
    }
    sb += ">"
    return sb.str()
}

def gen_type_string(type: &Type, full: bool = true): str => match type.base {
    Char | Bool | Void | I8 | I16 | I32 | I64 | U8 | U16 | U32 | U64 | F32 | F64 => type.base.str()
    Pointer => match type.u.ptr.base {
        Void => "untyped_ptr"
        Char => "str"
        else => `&{gen_type_string(type.u.ptr, full)}`
    }
    Array => `&{gen_type_string(type.u.arr.elem_type, full)}`
    Structure | Enum | Alias => {
        if not type.template_instance? return match full {
            true => type.sym.display
            false => type.sym.name
        }

        let instance = type.template_instance
        let sb = Buffer::make()
        sb += if full then instance.parent.display else instance.parent.name
        sb <<= gen_template_params(instance.args)
        yield sb.str()
    }
    Function => {
        let sb = Buffer::make()
        let func_type = type.u.func
        let is_non_static_method = false

        if func_type.orig? {
            if func_type.orig.is_method {
                is_non_static_method = not func_type.orig.is_static
            }
            sb += "def "

            let orig = func_type.orig
            if orig.parent_type? {
                sb += gen_type_string(orig.parent_type, full: false)
                sb += "::"
                sb += orig.sym.name

            } else {
                sb += func_type.orig.sym.display
            }

            if orig.sym.template? {
                sb += "<"
                let params = orig.sym.template.params
                for let i = 0; i < params.size; i += 1 {
                    if i > 0 {
                        sb += ", "
                    }
                    sb += params[i].name
                }
                sb += ">"
            }

        } else {
            sb += "fn"
        }
        sb += "("
        for let i = 0; i < func_type.params.size; i += 1 {
            let param = func_type.params.at(i)
            if i > 0 {
                sb += ", "
            }
            sb += gen_func_param_string(i, param, is_non_static_method)
        }
        if func_type.is_variadic {
            if func_type.params.size > 0 {
                sb += ", "
            }
            sb += "..."
        }
        sb += ")"
        if func_type.return_type.base != BaseType::Void {
            sb += ": "
            sb += gen_type_string(func_type.return_type, full: false)
        }
        yield sb.str()
    }
    Unresolved => {
        let unres = type.u.unresolved
        yield match unres.type {
            Identifier => unres.u.ident.name
            else => "<unresolved>"
        }
    }
    UnresolvedTemplate => {
        let unres = type.u.unresolved_spec
        let sb = Buffer::make()
        sb += gen_type_string(unres.base, full)
        sb <<= gen_template_params(unres.args)
        yield sb.str()
    }
    Error | NUM_BASE_TYPES => "ERROR"
}

def try_gen_expr_string(expr: &AST): str => match expr.type {
    BoolLiteral => if expr.u.bool_literal then "true" else "false"
    IntLiteral | FloatLiteral => {
        let literal = &expr.u.num_literal
        yield match literal.suffix? {
            true => `{literal.text}{literal.suffix.str()}`
            false => literal.text
        }
    }
    StringLiteral => `"{expr.u.string_literal}"`
    CharLiteral => `'{expr.u.char_literal}'`
    Null => "null"
    Identifier => expr.u.ident.name
    NSLookup => {
        let lhs_str = try_gen_expr_string(expr.u.lookup.lhs)
        if not lhs_str? return null
        yield `{lhs_str}::{expr.u.lookup.rhs_name}`
    }
    else => null
}

def gen_hover_string(sym: &Symbol): str => match sym.type {
    TypeDef => gen_type_string(sym.u.type_def)
    Function => gen_type_string(sym.u.func.type)
    Variable => {
        let sb = Buffer::make()
        sb += sym.display
        sb += ": "
        sb += gen_type_string(sym.u.var.type)
        yield sb.str()
    }
    Constant => {
        let sb = Buffer::make()
        sb += "const "
        sb += sym.display
        sb += ": "
        sb += gen_type_string(sym.u.var.type)
        yield sb.str()
    }
    Enum | EnumVariant => `enum {sym.display}`
    Structure => `struct {sym.display}`
    Namespace => `namespace {sym.display}`
}

def get_symbol_typedef(sym: &Symbol): &Type => match sym.type {
    TypeDef => sym.u.type_def
    Function => sym.u.func.type
    Variable => sym.u.var.type
    EnumVariant => sym.u.var.type
    Constant => sym.u.var.type
    Enum => sym.u.enum_.type
    Structure => sym.u.struc.type
    Namespace => null
}

def gen_error_json(err: &Error): &Value {
    let obj = Value::new(Dictionary)
    obj["severity"] = "Error"
    obj["span"] = gen_span_json(err.span1)
    obj["message"] = err.msg1
    match err.type {
        WithHint | WithNote => {
            let extra_info = Value::new(Dictionary)
            let extra_span = match err.type {
                WithHint => if err.span2.is_valid() then err.span2 else err.span1
                else => err.span1
            }
            extra_info["span"] = gen_span_json(extra_span)
            extra_info["message"] = err.msg2
            obj["extra_info"] = extra_info
        }
        Standard => {}
    }
    return obj
}

def gen_span_json(span: Span): &Value {
    let obj = Value::new(Dictionary)
    obj["start_line"] = Value::new_int(span.start.line as i64)
    obj["start_col"] = Value::new_int(span.start.col as i64)
    obj["end_line"] = Value::new_int(span.end.line as i64)
    obj["end_col"] = Value::new_int(span.end.col as i64)
    return obj
}

def gen_span_json_with_filename(span: Span, search_loc: Location): &Value {
    let obj = gen_span_json(span)
    if not span.start.filename.eq(search_loc.filename) {
        obj["file"] = span.start.filename
    }
    return obj
}

def gen_hover_json(sym: &Symbol): &Value {
    let obj = Value::new(Dictionary)
    obj["hover"] = gen_hover_string(sym)
    return obj
}

def gen_hover_string_with_docs(sym: &Symbol): &Value {
    let sb = Buffer::make()
    sb += gen_hover_string(sym)
    if sym.comment? {
        sb += "\n"
        sb += sym.comment
    }

    let obj = Value::new(Dictionary)
    obj["hover"] = sb.str()
    return obj
}

def gen_type_methods_into(obj: &Value, type: &Type) {
    if not type? or not type.methods? return
    for it : type.methods.iter() {
        let func = it.value
        let func_doc = Value::new(Dictionary)
        func_doc["name"] = it.key
        func_doc["detail"] = gen_hover_string(func.sym)
        func_doc["kind"] = "method"
        func_doc["range"] = gen_span_json(func.sym.span)
        func_doc["selection_range"] = gen_span_json(func.sym.span)
        func_doc["children"] = Value::new(List)
        obj += func_doc
    }
}

def gen_enum_json(enum_: &Enum): &Value {
    let obj = Value::new(Dictionary)
    obj["name"] = enum_.sym.name
    obj["detail"] = gen_hover_string(enum_.sym)
    obj["kind"] = "enum"
    obj["range"] = gen_span_json(enum_.sym.span)
    obj["selection_range"] = gen_span_json(enum_.sym.span)

    let children = Value::new(List)
    for member : enum_.fields.iter() {
        let member_obj = Value::new(Dictionary)
        member_obj["name"] = member.sym.name
        member_obj["kind"] = "enum-member"
        member_obj["range"] = gen_span_json(member.sym.span)
        member_obj["selection_range"] = gen_span_json(member.sym.span)
        member_obj["children"] = Value::new(List)
        children += member_obj
    }
    gen_type_methods_into(children, enum_.type)
    obj["children"] = children

    return obj
}

def gen_struct_json(struc: &Structure): &Value {
    let obj = Value::new(Dictionary)
    obj["name"] = struc.sym.name
    obj["detail"] = gen_hover_string(struc.sym)
    obj["kind"] = "struct"
    obj["range"] = gen_span_json(struc.sym.span)
    obj["selection_range"] = gen_span_json(struc.sym.span)

    let children = Value::new(List)
    gen_type_methods_into(children, struc.type)
    obj["children"] = children

    return obj
}

def gen_variable_json(var: &Variable): &Value {
    let obj = Value::new(Dictionary)
    obj["name"] = var.sym.name
    obj["detail"] = gen_hover_string(var.sym)
    obj["kind"] = "variable"
    obj["range"] = gen_span_json(var.sym.span)
    obj["selection_range"] = gen_span_json(var.sym.span)
    obj["children"] = Value::new(List)
    return obj
}

def gen_function_json(func: &Function): &Value {
    let obj = Value::new(Dictionary)
    obj["name"] = func.sym.name
    obj["detail"] = gen_hover_string(func.sym)
    obj["kind"] = "function"
    obj["range"] = gen_span_json(func.sym.span)
    obj["selection_range"] = gen_span_json(func.sym.span)
    obj["children"] = Value::new(List)
    return obj
}

def gen_namespace_json(ns: &Namespace): &Value {
    let obj = Value::new(Dictionary)
    obj["name"] = ns.sym.name
    obj["detail"] = gen_hover_string(ns.sym)
    obj["kind"] = "namespace"
    obj["range"] = gen_span_json(ns.sym.span)
    obj["selection_range"] = gen_span_json(ns.span)

    let children = Value::new(List)
    for enum_ : ns.enums.iter() {
        children += gen_enum_json(enum_)
    }

    for struc : ns.structs.iter() {
        children += gen_struct_json(struc)
    }

    for var : ns.variables.iter() {
        children += gen_variable_json(var.u.var_decl.var)
    }

    for var : ns.constants.iter() {
        children += gen_variable_json(var.u.var_decl.var)
    }

    for func : ns.functions.iter() {
        if func.is_method continue
        children += gen_function_json(func)
    }

    for it : ns.namespaces.iter_values() {
        children += gen_namespace_json(it)
    }

    obj["children"] = children
    return obj
}

def gen_completion_item(sym: &Symbol): &Value {
    let val = Value::new(Dictionary)
    val["label"] = sym.name
    val["detail"] = gen_hover_string(sym)

    // TODO: other types?
    match sym.type {
        Function => {
            val["insertText"] = sym.name
            val["kind"] = "function"
            val["labelDetails"] = gen_hover_string(sym)
            if sym.comment? {
                val["documentation"] = sym.comment
            }
        }
        Variable => {
            val["insertText"] = sym.name
            val["kind"] = "field"
            val["labelDetails"] = gen_hover_string(sym)
            if sym.comment? {
                val["documentation"] = sym.comment
            }
        }
        else => {
            val["insertText"] = sym.name
            // TODO: Different `kinds`
            val["kind"] = "field"
            val["labelDetails"] = gen_hover_string(sym)
            if sym.comment? {
                val["documentation"] = sym.comment
            }
        }
    }
    return val
}

def get_unique_reference_spans(sym: &Symbol, for_rename: bool): &Vector<Span> {
    let set = Set<Span>::new()
    for ref in sym.references.iter() {
        if for_rename and ref.type != Normal continue
        set += ref.span
    }
    set += sym.span
    let vec = Vector<Span>::new()
    for span in set.iter() {
        vec.push(span)
    }
    set.free()
    return vec
}

def gen_references_json(sym: &Symbol, loc: Location): &Value {
    let obj = Value::new(List)
    let spans = get_unique_reference_spans(sym, for_rename: false)
    for ref in spans.iter() {
        obj += gen_span_json_with_filename(ref, loc)
    }
    spans.free()
    return obj
}

def gen_signature_help(node: &AST, active_param: u32): &Value {
    let obj = Value::new(Dictionary)
    let callee_sym = node.u.call.callee.resolved_symbol
    if not callee_sym? or callee_sym.type != Function return obj

    let func = callee_sym.u.func
    obj["label"] = gen_type_string(func.type)

    let params = func.params
    let params_obj = Value::new(List)

    let is_non_static_method = func.is_method and not func.is_static
    for let i = 0; i < params.size; i += 1 {
        let param = params.at(i)
        let param_obj = Value::new(Dictionary)
        param_obj["label"] = gen_func_param_string(i, param, is_non_static_method)
        params_obj += param_obj
    }
    obj["parameters"] = params_obj

    let sig_help = Value::new(Dictionary)
    sig_help["signatures"] = Value::new(List)
    sig_help["signatures"] += obj

    sig_help["activeSignature"] = 0
    sig_help["activeParameter"] = active_param
    return sig_help
}

def gen_renames_json(sym: &Symbol, loc: Location): &Value {
    let obj = Value::new(List)
    let spans = get_unique_reference_spans(sym, for_rename: true)
    for ref in spans.iter() {
        let size = ref.end.index - ref.start.index
        // FIXME: This is a bit hacky, but it's to accomodate the `this` shorthand `.foo` syntax.
        //        We want to add a reference to the `.` for discoverability, but don't want to replace
        //        it with the new name. Instead, we decrease the span to not include the `.`, causing the
        //        editor to insert the new name before the `.`.
        if sym.name == "this" and size == 1 {
            ref = Span(ref.start, ref.start)
        }

        obj += gen_span_json_with_filename(ref, loc)
    }
    return obj
}

def gen_completions_from_scope(scope: &Scope, completions: &Value) {
    if not scope? return
    for item in scope.items.iter_values() {
        completions += gen_completion_item(item)
    }
    gen_completions_from_scope(scope.parent, completions)
}

def gen_completion_items_from_ns(ns: &Namespace, completions: &Value) {
    let seen = Set<str>::new()
    defer seen.free()

    for it : ns.namespaces.iter_values() {
        seen += it.sym.name
        completions += gen_completion_item(it.sym)
    }
    for it : ns.enums.iter() {
        seen += it.sym.name
        completions += gen_completion_item(it.sym)
    }
    for it : ns.structs.iter() {
        seen += it.sym.name
        completions += gen_completion_item(it.sym)
    }
    for it : ns.variables.iter() {
        if it.resolved_symbol? {
            seen += it.resolved_symbol.name
            completions += gen_completion_item(it.resolved_symbol)
        }
    }
    for it : ns.constants.iter() {
        if it.resolved_symbol? {
            seen += it.resolved_symbol.name
            completions += gen_completion_item(it.resolved_symbol)
        }
    }
    for it : ns.functions.iter() {
        if not it.is_method {
            seen += it.sym.name
            completions += gen_completion_item(it.sym)
        }
    }

    // If this namespace corresponds to a directory, we want to check out the (un-loaded)
    // files / directories in the directory and add them to the completions.
    if not (ns.is_a_file and not ns.is_top_level) {
        let ns_path = ns.path
        for entry in fs::iterate_directory(ns_path) {
            if entry.name in seen continue

            let path = `{ns_path}/{entry.name}`
            defer path.free()

            if fs::file_exists(path) and path.ends_with(".oc") {
                let name = entry.name.copy()
                name[name.len() - 3] = '\0'
                if name == "mod" or name in seen continue

                let item = Value::new(Dictionary)
                item["label"] = name
                item["kind"] = "field"
                item["insertText"] = name
                item["detail"] = "(file)"
                completions += item
            }

            if fs::directory_exists(path) {
                let item = Value::new(Dictionary)
                item["label"] = entry.name
                item["kind"] = "field"
                item["insertText"] = entry.name
                item["detail"] = "(directory)"
                completions += item
            }
        }
    }
}

def gen_completions_from_symbol(sym: &Symbol, node: &AST, completions: &Value) {
    match sym.type {
        Structure => {
            if node? and node.type != NSLookup {
                for field : sym.u.struc.fields.iter() {
                    completions += gen_completion_item(field.sym)
                }
            }
            for mth : sym.u.struc.type.methods.iter_values() {
                completions += gen_completion_item(mth.sym)
            }
        }
        TypeDef => {
            for mth : sym.u.type_def.methods.iter_values() {
                completions += gen_completion_item(mth.sym)
            }
        }
        Enum => {
            if node? and node.type == NSLookup {
                for field : sym.u.enum_.fields.iter() {
                    completions += gen_completion_item(field.sym)
                }
            }
            for mth : sym.u.enum_.type.methods.iter_values() {
                completions += gen_completion_item(mth.sym)
            }
        }
        Variable => {
            let typ = get_symbol_typedef(sym)
            if typ? and not typ.can_have_methods() and typ.base == Pointer {
                typ = typ.u.ptr
            }
            if typ? and typ.sym? {
                gen_completions_from_symbol(typ.sym, node, completions)
            }
        }
        Namespace => gen_completion_items_from_ns(sym.u.ns, completions)
        else => {
            if verbose then println(f"gen_completions_json: unhandled symbol type: {sym.type}")
        }
    }
}

def gen_completions_json(finder: &Finder): &Value {
    let node = finder.found_node
    if not node? return null

    let completions = Value::new(List)

    let sym = match node.type {
        Member => node.u.member.lhs.resolved_symbol
        NSLookup => node.u.lookup.lhs.resolved_symbol
        Import => finder.found_import_ns.sym
        else => null
    }

    match sym? {
        // If we have a symbol to complete, we can generate completions from it...
        true => gen_completions_from_symbol(sym, node, completions)

        // ...otherwise, we can generate completions from the current scope.
        false => gen_completions_from_scope(finder.found_scope, completions)
    }

    let obj = Value::new(Dictionary)
    obj["completions"] = completions
    return obj
}