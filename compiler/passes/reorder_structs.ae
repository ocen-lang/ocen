use "@/passes/generic_pass.ae"

// This pass reorders structs so that they can be generated in the correct order for C,
// and stores the result inside `program.ordered_structs`

struct ReorderStructs {
    o: &GenericPass
    all_structs: &Vector
    done: &Map
}

def ReorderStructs::new(program: &Program): &ReorderStructs {
    let pass = calloc(1, sizeof(ReorderStructs)) as &ReorderStructs
    *pass = ReorderStructs(
        o: GenericPass::new(program),
        all_structs: Vector::new(),
        done: Map::new()
    )
    return pass
}

def ReorderStructs::free(&this) {
    .all_structs.free()
    .done.free()
    free(.o)
    free(this)
}

// Collects all structs we have in the namespace into the vector
def ReorderStructs::collect_all_structs(&this, ns: &Namespace) {
    for let i = 0; i < ns.structs.size; i += 1 {
        let struc = ns.structs.at(i) as &Structure
        .all_structs.push(struc)
    }
    for let iter = ns.namespaces.iter(); iter.cur?; iter.next() {
        .collect_all_structs(iter.value())
    }
}

def ReorderStructs::dfs(&this, struc: &Structure) {
    if .done.get(struc.sym.out_name)? return
    .done.insert(struc.sym.out_name, struc)

    for let i = 0; i < struc.fields.size; i += 1 {
        let field = struc.fields.at(i) as &Variable
        if field.type? and field.type.base == BaseType::Structure {
            let other = field.type.u.struc
            .dfs(other)
        }
    }
    .o.program.ordered_structs.push(struc)
}

// This function topologically sorts the structs based on depedencies, and stores
// the result inside `program.ordered_structs`
def ReorderStructs::reorder_structs(&this) {
    for let i = 0; i < .all_structs.size; i += 1 {
        let struc = .all_structs.at(i) as &Structure
        .dfs(struc)
    }
}

def ReorderStructs::run(program: &Program) {
    let pass = ReorderStructs::new(program)

    pass.collect_all_structs(program.global)
    pass.reorder_structs()

    println(`Program reordered structs count: {program.ordered_structs.size}`)

    pass.free()
}