//* Topologically sort structs
//*
//* This is needed because in C structs need to be declared before they are used
//* in other structs. The ordered structs are stored in `program.ordered_structs`

import @passes::generic_pass::GenericPass
import std::vector::Vector
import std::map::Map
import @ast::program::{ Program, Namespace }
import @ast::nodes::{ Structure, Variable }
import @ast::scopes::{ TemplateInstance }
import std::libc::{ calloc, free }

struct ReorderStructs {
    o: &GenericPass
    all_structs: &Vector<&Structure>
    done: &Map<str, &Structure>
}

def ReorderStructs::new(program: &Program): &ReorderStructs {
    let pass = calloc(1, sizeof(ReorderStructs)) as &ReorderStructs
    *pass = ReorderStructs(
        o: GenericPass::new(program),
        all_structs: Vector<&Structure>::new(),
        done: Map<str, &Structure>::new(),
    )
    return pass
}

def ReorderStructs::free(&this) {
    .all_structs.free()
    .done.free()
    free(.o)
    free(this)
}

// Collects all structs we have in the namespace into the vector
def ReorderStructs::collect_all_structs(&this, ns: &Namespace) {
    for struc : ns.structs.iter() {
        if struc.sym.is_templated() {
            for instance : struc.sym.template.instances.iter() {
                let sym = instance.resolved
                assert sym.type == Structure
                .all_structs.push(sym.u.struc)
            }

        } else {
            .all_structs.push(struc)
        }
    }
    for child : ns.namespaces.iter_values() {
        .collect_all_structs(child)
    }
}

def ReorderStructs::dfs(&this, struc: &Structure) {
    if .done.get(struc.sym.out_name, null)? return
    .done.insert(struc.sym.out_name, struc)

    for field : struc.fields.iter() {
        if field.type? and field.type.base == Structure {
            let other = field.type.u.struc
            .dfs(other)
        }
    }
    .o.program.ordered_structs.push(struc)
}

// This function topologically sorts the structs based on depedencies, and stores
// the result inside `program.ordered_structs`
def ReorderStructs::reorder_structs(&this) {
    for struc : .all_structs.iter() {
        .dfs(struc)
    }
}

def ReorderStructs::run(program: &Program) {
    let pass = ReorderStructs::new(program)
    pass.collect_all_structs(program.global)
    pass.reorder_structs()
    pass.free()
}