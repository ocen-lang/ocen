//* Topologically sort structs
//*
//* This is needed because in C structs need to be declared before they are used
//* in other structs. The ordered structs are stored in `program.ordered_structs`

import std::mem
import @passes::generic_pass::GenericPass
import std::vector::Vector
import std::set::{ Set }
import @ast::program::{ Program, Namespace }
import @ast::nodes::{ Structure, Variable }
import @ast::scopes::{ TemplateInstance, Symbol }

struct ReorderStructs {
    o: &GenericPass
    all_structs: &Vector<&Structure>
    all_syms: &Vector<&Symbol>
    done: &Set<untyped_ptr>
}

def ReorderStructs::new(program: &Program): &ReorderStructs {
    let pass = mem::alloc<ReorderStructs>()
    *pass = ReorderStructs(
        o: GenericPass::new(program),
        all_structs: Vector<&Structure>::new(),
        all_syms: Vector<&Symbol>::new(),
        done: Set<untyped_ptr>::new(),
    )
    return pass
}

def ReorderStructs::free(&this) {
    .all_structs.free()
    .all_syms.free()
    .done.free()
    mem::free(.o)
    mem::free(this)
}

// Collects all structs we have in the namespace into the vector
def ReorderStructs::collect_all_structs(&this, ns: &Namespace) {
    for struc : ns.structs.iter() {
        if struc.sym.is_templated() {
            for instance : struc.sym.template.instances.iter() {
                let sym = instance.resolved
                assert sym.type == Structure
                .all_structs += sym.u.struc
                .all_syms += sym
            }

        } else {
            .all_structs += struc
            .all_syms += struc.sym
        }
    }
    for enom in ns.enums.iter() {
        .all_syms += enom.sym
    }
    for child : ns.namespaces.iter_values() {
        .collect_all_structs(child)
    }
}

def ReorderStructs::dfs(&this, sym: &Symbol) {
    if not sym? or .done.contains(sym) return
    .done.add(sym)

    match sym.type {
        Structure => {
            for field : sym.u.struc.fields.iter() {
                if field.type? {
                    .dfs(field.type.sym)
                }
            }
            .o.program.ordered_structs += sym.u.struc
        }
        Enum => {
            for field in sym.u.enom.shared_fields.iter() {
                if field.type? {
                    .dfs(field.type.sym)
                }
            }
            for variant in sym.u.enom.variants.iter() {
                for field in variant.specific_fields.iter() {
                    if field.type? {
                        .dfs(field.type.sym)
                    }
                }
            }
        }
        else => return  // Don't care about other types
    }
    .o.program.ordered_symbols += sym
}

// This function topologically sorts the structs based on depedencies, and stores
// the result inside `program.ordered_structs`
def ReorderStructs::reorder_structs(&this) {
    for sym : .all_syms.iter() {
        .dfs(sym)
    }
}

def ReorderStructs::run(program: &Program) {
    let pass = ReorderStructs::new(program)
    pass.collect_all_structs(program.global)
    pass.reorder_structs()
    pass.free()
}