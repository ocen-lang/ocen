//* Mark Dead Code
//*
//* This pass marks all functions / structs / enums that are not used as dead, so
//* that they can be removed and not compiled into the final binary.

import std::vector::Vector
import std::mem
import std::map::Map
import std::set::{ Set }

import @passes::generic_pass::GenericPass
import @ast::program::{ Program, Namespace }
import @ast::nodes::{ Structure, Variable, Function, AST, Enum }
import @ast::scopes::{ TemplateInstance, Symbol }
import @types::{ Type }
import @errors::{ Error }

struct MarkDeadCode {
    o: &GenericPass
    done: &Set<u64>
}

def MarkDeadCode::new(program: &Program): &MarkDeadCode {
    let pass = mem::alloc<MarkDeadCode>()
    *pass = MarkDeadCode(
        o: GenericPass::new(program),
        done: Set<u64>::new(),
    )
    return pass
}

def MarkDeadCode::free(&this) {
    .done.free()
    mem::free(.o)
    mem::free(this)
}

def MarkDeadCode::mark_sym(&this, sym: &Symbol) {
    if not sym? return
    match sym.type {
        Function => .mark_function(sym.u.func)
        Structure => .mark_struct(sym.u.struc)
        Enum => .mark_enum(sym.u.enom)
        Constant | Variable => {
            .mark_type(sym.u.var.type)
            .mark(sym.u.var.default_value)
            sym.u.var.sym.is_dead = false
        }
        Closure => .mark_function(sym.u.closure)
        ClosureType => .mark_type(sym.u.type_def)
        ClosedVariable => .mark_sym(sym.u.closed_var.orig.sym)
        else => {}
    }
}

def MarkDeadCode::mark_function(&this, f: &Function) {
    if not f? or .done.contains(f as u64) return
    .done.add(f as u64)

    f.sym.is_dead = false
    .mark(f.body)

    for param : f.params.iter() {
        .mark_type(param.type)
    }
}

def MarkDeadCode::mark_type(&this, typ: &Type) {
    if not typ? return
    match typ.base {
        Pointer | Alias => .mark_type(typ.u.ptr)
        Array => .mark_type(typ.u.arr.elem_type)
        FunctionPtr | Closure => {
            let ft = typ.u.func
            .mark_type(ft.return_type)
            for param : ft.params.iter() {
                .mark_type(param.type)
            }
        }
        else => {
            .mark_sym(typ.sym)
            if typ.template_instance? {
                for arg : typ.template_instance.args.iter() {
                    .mark_type(arg)
                }
            }
        }
    }
}

def MarkDeadCode::mark_struct(&this, s: &Structure) {
    if not s? or .done.contains(s as u64) return
    .done.add(s as u64)

    s.sym.is_dead = false
    for field : s.fields.iter() {
        .mark_type(field.type)
    }
}

def MarkDeadCode::mark_enum(&this, e: &Enum) {
    if not e? or .done.contains(e as u64) return
    .done.add(e as u64)

    e.sym.is_dead = false
    for var in e.variants.iter() {
        .mark_sym(var.sym)
        for field in var.specific_fields.iter() {
            .mark_sym(field.sym)
            .mark_type(field.type)
            .mark(field.default_value)
        }
    }

    for var in e.shared_fields.iter() {
        .mark_sym(var.sym)
        .mark_type(var.type)
        .mark(var.default_value)
    }
}

def MarkDeadCode::mark(&this, node: &AST) {
    if not node? return
    .mark_sym(node.resolved_symbol)

    match node.type {
        Import | Break | Continue | IntLiteral | FloatLiteral |
        BoolLiteral | StringLiteral | CharLiteral | Null => {}

        Yield | Defer => .mark(node.u.child)
        CreateNew => {
            .mark(node.u.child)
            if .o.program.did_cache_symbols {
                .mark_sym(.o.program.cached_symbols.mem_alloc_fn)
                .mark_sym(.o.program.cached_symbols.mem_allocator)
            }
        }
        Return => .mark(node.u.ret.expr)
        UnaryOp => .mark(node.u.unary.expr)

        SizeOf => .mark_type(node.u.size_of_type)
        VarDeclaration => .mark_sym(node.u.var_decl.sym)
        Block => {
            for statement : node.u.block.statements.iter() {
                .mark(statement)
            }
        }
        CreateClosure => .mark_function(node.u.closure)
        If => {
            for branch in node.u.if_stmt.branches.iter() {
                .mark(branch.cond)
                .mark(branch.body)
            }
            .mark(node.u.if_stmt.els)
        }
        Match => {
            .mark(node.u.match_stmt.expr)
            for c : node.u.match_stmt.cases.iter() {
                for cond in c.conds.iter() {
                    .mark(cond.expr)
                    if cond.cmp_fn? {
                        .mark_function(cond.cmp_fn)
                    }
                }
                .mark(c.body)
            }
            .mark(node.u.match_stmt.defolt)
        }
        While | For => {
            .mark(node.u.loop.init)
            .mark(node.u.loop.cond)
            .mark(node.u.loop.step)
            .mark(node.u.loop.body)
        }
        Assert => {
            .mark(node.u.assertion.expr)
            .mark(node.u.assertion.msg)
        }
        FormatStringLiteral => {
            if .o.program.did_cache_symbols {
                .mark_sym(.o.program.cached_symbols.fmt_string_fn)
            }
            for expr : node.u.fmt_str.exprs.iter() {
                .mark(expr)
            }
        }
        Member => {
            .mark(node.u.member.lhs)
        }
        Identifier | Specialization | OverloadedOperator => {}
        NSLookup => .mark(node.u.lookup.lhs)
        Call => {
            .mark(node.u.call.callee)
            for arg : node.u.call.args.iter() {
                .mark(arg.expr)
            }
        }
        BinaryOp => {
            .mark(node.u.binary.lhs)
            .mark(node.u.binary.rhs)
        }
        Cast => {
            .mark(node.u.cast.lhs)
            .mark_type(node.u.cast.to)
        }
        ArrayLiteral => {
            for expr : node.u.array_literal.elements.iter() {
                .mark(expr)
            }
        }
        else => .o.error(Error::new(node.span, `Unhandled expression type in MarkDeadCode: {node.type}`))
    }
}

def MarkDeadCode::find_main_function(&this, program: &Program): &Function {
    for ns : program.iter_namespaces() {
        for f : ns.functions.iter() {
            if f.sym.full_name.eq("main") {
                return f
            }
        }
    }
    return null
}

def MarkDeadCode::mark_sym_as_dead_by_default(&this, sym: &Symbol) {
    if not sym? return
    sym.is_dead = true

    if sym.template? {
        for instance : sym.template.instances.iter() {
            .mark_sym_as_dead_by_default(instance.resolved)
        }
    }
}

def MarkDeadCode::run(program: &Program) {
    let pass = MarkDeadCode::new(program)
    defer pass.free()

    let main = pass.find_main_function(program)
    if not main? and program.explicit_alive_symbols.is_empty() {
        println("[+] No alive functions found, not marking any functions as dead.")
        return
    }

    if program.keep_all_code {
        return
    }

    // Mark all functions as dead by default
    for ns : program.iter_namespaces() {
        for f : ns.functions.iter() {
            pass.mark_sym_as_dead_by_default(f.sym)
        }
        for s : ns.structs.iter() {
            pass.mark_sym_as_dead_by_default(s.sym)
        }
        for e : ns.enums.iter() {
            pass.mark_sym_as_dead_by_default(e.sym)
        }
        for v : ns.variables.iter() {
            pass.mark_sym_as_dead_by_default(v.u.var_decl.sym)
        }
        for c : ns.constants.iter() {
            pass.mark_sym_as_dead_by_default(c.u.var_decl.sym)
        }
    }
    for cty in program.closure_types.iter() {
        pass.mark_sym_as_dead_by_default(cty.sym)
    }
    for clos in program.closures.iter() {
        pass.mark_sym_as_dead_by_default(clos.sym)
    }

    // For constants and variables, mark their types as used
    if main? {
        pass.mark_function(main)
    }
    for sym in program.explicit_alive_symbols.iter() {
        pass.mark_sym(sym)
    }
}