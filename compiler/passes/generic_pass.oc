//* Common helper functions for passes

import std::vector::Vector
import std::span::Span
import @ast::scopes::{ Scope, Symbol, SymbolType }
import @ast::program::{ Program, Namespace }
import @errors::Error
import @types::{ Type, BaseType }
import @ast::nodes::{ AST, Function, Structure, Enum, Variable }
import std::libc::calloc

//* Base class for passes
//*
//* This is a helper class to use in passes to accomplish common tasks like managing
//* scopes / namespaces, resolving types, and inserting symbols into scopes.
//*
//* To use this, you should add a field to your pass struct like this:
//*
//*     struct MyPass {
//*         o: &GenericPass
//*         ...
//*     }
//*
//* Then, initialize it with `my_pass.o = GenericPass::new(program)`. After this, you
//* can use the methods on it like `.o.push_scope(scope)` etc. inside the pass methods.
struct GenericPass {
    scope_stack: &Vector<&Scope>
    namespace_stack: &Vector<&Namespace>
    program: &Program
    error_type: &Type
}

def GenericPass::new(program: &Program): &GenericPass {
    let pass = calloc(1, sizeof(GenericPass)) as &GenericPass
    pass.scope_stack = Vector<&Scope>::new()
    pass.namespace_stack = Vector<&Namespace>::new()
    pass.program = program
    return pass
}

def GenericPass::push_scope(&this, scope: &Scope) {
    .scope_stack.push(scope)
}

def GenericPass::push_namespace(&this, ns: &Namespace) {
    .namespace_stack.push(ns)
}

def GenericPass::pop_scope(&this): &Scope {
    if .scope_stack.size == 0 return null
    return .scope_stack.pop() as &Scope
}

def GenericPass::pop_namespace(&this): &Namespace {
    if .namespace_stack.size == 0 return null
    return .namespace_stack.pop() as &Namespace
}

def GenericPass::scope(&this): &Scope {
    if .scope_stack.size == 0 return null
    return .scope_stack.at(.scope_stack.size - 1)
}

def GenericPass::ns(&this): &Namespace {
    if .namespace_stack.size == 0 return null
    return .namespace_stack.at(.namespace_stack.size - 1)
}

def GenericPass::error(&this, err: &Error): &Error {
    .program.errors.push(err)
    return err
}

def GenericPass::insert_into_scope_checked(&this, item: &Symbol, name: str = null) {
    if not name? name = item.name
    let prev = .scope().lookup_local(name)
    if prev? {
        .error(Error::new_hint(
            item.span, `Name {name} already exists in scope`,
            prev.span, `Previous use of {name}`
        ))
        return
    }
    .scope().insert(name, item)
}

def GenericPass::lookup_in_symbol(&this, sym: &Symbol, name: str, span: Span, error: bool): &Symbol => match sym.type {
    SymbolType::Namespace => {
        let ns = sym.u.ns
        let res = ns.find_importable_symbol(name)
        if error and not res? {
            .error(Error::new_hint(
                span, `Could not find symbol {name} in namespace {sym.display}`,
                sym.span, `Namespace was defined here`
            ))
        }
        yield res
    }
    SymbolType::Structure => {
        let struc = sym.u.struc
        if sym.is_templated() {
            .error(Error::new_hint(
                span, `Need to specify template specialization for {sym.display}`,
                sym.span, `Template was defined here`
            ))
        }
        let method = struc.type.methods.get(name, null)
        if error and not method? {
            .error(Error::new(span, `Could not find method {name} in structure {sym.display}`))
        }
        if not method? return null
        yield method.sym
    }
    SymbolType::TypeDef => {
        let type_def = sym.u.type_def
        let method = type_def.methods.get(name, null)
        if error and not method? {
            .error(Error::new(span, `Could not find method {name} in type {sym.display}`))
        }
        if not method? return null
        yield method.sym
    }
    SymbolType::Enum => {
        let enum_ = sym.u.enum_
        let field = enum_.get_field(name)
        if field? then return field.sym

        let method = enum_.type.methods.get(name, null)
        if method? then return method.sym

        if error {
            .error(Error::new_hint(
                span, `Could not find value/method {name} in enum {sym.display}`,
                sym.span, `Enum was defined here`
            ))
        }
        return null
    }
    else => {
        .error(Error::new_hint(
            span, `Can't lookup a name inside a {sym.type}`,
            sym.span, `{sym.type} was defined here`
        ))
        return null
    }
}

def GenericPass::import_all_from_namespace(&this, ns: &Namespace) {
    for func : ns.functions.iter() {
        if not func.is_method {
            .insert_into_scope_checked(func.sym)
        }
    }

    for struc : ns.structs.iter() {
        .insert_into_scope_checked(struc.sym)
    }

    for enum_ : ns.enums.iter() {
        .insert_into_scope_checked(enum_.sym)
    }

    for node : ns.variables.iter() {
        let var = node.u.var_decl.var
        .insert_into_scope_checked(var.sym)
    }

    for node : ns.constants.iter() {
        let var = node.u.var_decl.var
        .insert_into_scope_checked(var.sym)
    }
}

def GenericPass::import_all_from_symbol(&this, sym: &Symbol) {
    match sym.type {
        SymbolType::Namespace => .import_all_from_namespace(sym.u.ns)
        SymbolType::TypeDef => {
            for method : sym.u.type_def.methods.iter_values() {
                .insert_into_scope_checked(method.sym)
            }
        }
        SymbolType::Structure => {
            for method : sym.u.struc.type.methods.iter_values() {
                .insert_into_scope_checked(method.sym)
            }
        }
        SymbolType::Enum => {
            for field : sym.u.enum_.fields.iter() {
                .insert_into_scope_checked(field.sym)
            }
        }
        else => {
            .error(Error::new(sym.span, `Can't imdo wildcard import from a {sym.type}`))
        }
    }
}