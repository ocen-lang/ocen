import std::vector::Vector
import std::span::Span
import std::map::OldMap
import @ast::scopes::{ Scope, Symbol, SymbolType }
import @ast::program::{ Program, Namespace }
import @errors::Error
import @types::{ Type, BaseType }
import @ast::nodes::{ AST, Function, Structure, Enum, Variable }
import std::libc::calloc

// This is a helper class to use in passes to accomplish common tasks like managing
// scopes / namespaces, resolving types, and inserting symbols into scopes.
//
// To use this, you should add a field to your pass struct like this:
//     struct MyPass {
//         o: &GenericPass
//         ...
//     }
//
// Then, initialize it with `my_pass.o = GenericPass::new(program)`. After this, you
// can use the methods on it like `.o.push_scope(scope)` etc. inside the pass methods.

struct GenericPass {
    scope_stack: &Vector<&Scope>
    namespace_stack: &Vector<&Namespace>
    program: &Program
    error_type: &Type
}

def GenericPass::new(program: &Program): &GenericPass {
    let pass = calloc(1, sizeof(GenericPass)) as &GenericPass
    pass.scope_stack = Vector<&Scope>::new()
    pass.namespace_stack = Vector<&Namespace>::new()
    pass.program = program
    return pass
}

def GenericPass::push_scope(&this, scope: &Scope) {
    .scope_stack.push(scope)
}

def GenericPass::push_namespace(&this, ns: &Namespace) {
    .namespace_stack.push(ns)
}

def GenericPass::pop_scope(&this): &Scope {
    if .scope_stack.size == 0 return null
    return .scope_stack.pop() as &Scope
}

def GenericPass::pop_namespace(&this): &Namespace {
    if .namespace_stack.size == 0 return null
    return .namespace_stack.pop() as &Namespace
}

def GenericPass::scope(&this): &Scope {
    if .scope_stack.size == 0 return null
    return .scope_stack.at(.scope_stack.size - 1)
}

def GenericPass::ns(&this): &Namespace {
    if .namespace_stack.size == 0 return null
    return .namespace_stack.at(.namespace_stack.size - 1)
}

def GenericPass::error(&this, err: &Error): &Error {
    .program.errors.push(err)
    return err
}

def GenericPass::insert_into_scope_checked(&this, item: &Symbol) {
    let prev = .scope().lookup_local(item.name)
    if prev? {
        .error(Error::new_hint(
            item.span, `Name {item.name} already exists in scope`,
            prev.span, `Previous use of {item.name}`
        ))
        return
    }
    .scope().insert(item.name, item)
}

def GenericPass::get_base_type(&this, base: BaseType, span: Span): &Type {
    let sym = .program.global.scope.lookup_local(base.str())
    if sym? and sym.type == SymbolType::TypeDef {
        return sym.u.type_def
    } else {
        .error(Error::new(span, `Internal compiler error, couldn't find base type {base}`))
        return .error_type
    }
}

def GenericPass::get_type_by_name(&this, name: str, span: Span): &Type {
    let sym = .program.global.scope.lookup_local(name)
    if sym? and sym.type == SymbolType::TypeDef {
        return sym.u.type_def
    } else {
        .error(Error::new(span, `Internal compiler error, couldn't find type {name}`))
        return .error_type
    }
}

def GenericPass::lookup_in_symbol(&this, sym: &Symbol, name: str, error: bool): &Symbol => match sym.type {
    SymbolType::Namespace => {
        let ns = sym.u.ns
        let res = ns.find_importable_symbol(name)
        if error and not res? {
            .error(Error::new(sym.span, `Could not find symbol {name} in namespace {sym.display}`))
        }
        yield res
    }
    SymbolType::Structure => {
        let struc = sym.u.struc
        let method = struc.type.methods.get(name) as &Function
        if error and not method? {
            .error(Error::new(sym.span, `Could not find method {name} in structure {sym.display}`))
        }
        if not method? return null
        yield method.sym
    }
    SymbolType::TypeDef => {
        let type_def = sym.u.type_def
        let method = type_def.methods.get(name) as &Function
        if error and not method? {
            .error(Error::new(sym.span, `Could not find method {name} in type {sym.display}`))
        }
        if not method? return null
        yield method.sym
    }
    SymbolType::Enum => {
        let enum_ = sym.u.enum_
        let field = enum_.get_field(name) as &Variable
        if field? then return field.sym

        let method = enum_.type.methods.get(name) as &Function
        if method? then return method.sym

        if error {
            .error(Error::new(sym.span, `Could not find value/method {name} in enum {sym.display}`))
        }
        return null
    }
    else => {
        .error(Error::new(sym.span, `Can't lookup a name inside a {sym.type}`))
        return null
    }
}

def GenericPass::import_all_from_namespace(&this, ns: &Namespace) {
    for let i = 0; i < ns.functions.size; i += 1 {
        let func = ns.functions.at(i)
        if not func.is_method {
            .insert_into_scope_checked(func.sym)
        }
    }

    for let i = 0; i < ns.structs.size; i += 1 {
        let struc = ns.structs.at(i)
        .insert_into_scope_checked(struc.sym)
    }

    for let i = 0; i < ns.enums.size; i += 1 {
        let enum_ = ns.enums.at(i)
        .insert_into_scope_checked(enum_.sym)
    }

    for let i = 0; i < ns.variables.size; i += 1 {
        let node = ns.variables.at(i)
        let var = node.u.var_decl.var
        .insert_into_scope_checked(var.sym)
    }

    for let i = 0; i < ns.constants.size; i += 1 {
        let node = ns.constants.at(i)
        let var = node.u.var_decl.var
        .insert_into_scope_checked(var.sym)
    }
}

def GenericPass::import_all_from_symbol(&this, sym: &Symbol) {
    match sym.type {
        SymbolType::Namespace => .import_all_from_namespace(sym.u.ns)
        SymbolType::TypeDef => {
            let methods = sym.u.type_def.methods
            for let iter = methods.iter(); iter.cur?; iter.next() {
                let method = iter.value() as &Function
                .insert_into_scope_checked(method.sym)
            }
        }
        SymbolType::Structure => {
            let methods = sym.u.struc.type.methods
            for let iter = methods.iter(); iter.cur?; iter.next() {
                let method = iter.value() as &Function
                .insert_into_scope_checked(method.sym)
            }
        }
        SymbolType::Enum => {
            let fields = sym.u.enum_.fields
            for let i = 0; i < fields.size; i += 1 {
                let field = fields.at(i)
                .insert_into_scope_checked(field.sym)
            }
        }
        else => {
            .error(Error::new(sym.span, `Can't imdo wildcard import from a {sym.type}`))
        }
    }
}