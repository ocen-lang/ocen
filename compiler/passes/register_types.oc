//* Register all types in the program


import std::span::{ Span }
import std::compact_map::{ Map }
import std::vector::{ Vector }
import @passes::generic_pass::GenericPass
import @ast::scopes::{ Symbol, SymbolType, Scope }
import @ast::program::{ Program, Namespace, CachedSymbols }
import @types::{ Type, BaseType, FunctionType }
import @ast::nodes::{ AST, Function, Structure, Variable,Enum }
import @errors::Error

struct RegisterTypes {
    o: &GenericPass
}

def RegisterTypes::register_struct(&this, ns: &Namespace, struc: &Structure) {
    let item = struc.sym
    .o.insert_into_scope_checked(item)

    let typ = Type::new_resolved(Structure, struc.sym.span)
    typ.u.struc = struc
    struc.type = typ
    typ.sym = struc.sym
}

def RegisterTypes::register_enum(&this, ns: &Namespace, enum_: &Enum) {
    let item = enum_.sym
    .o.insert_into_scope_checked(item)

    let typ = Type::new_resolved(Enum, enum_.sym.span)
    typ.u.enom = enum_
    enum_.type = typ
    typ.sym = enum_.sym

    let values = Map<str, Span>::new()
    for var in enum_.variants.iter() {
        var.parent = enum_
        let name = var.sym.name
        let res = values.get_item(name)
        if res? {
            .o.error(Error::new_hint(
                var.sym.span, `Duplicate enum variant: {var.sym.name}`,
                res.value, "Previous definition here"
            ))
        } else {
            values[name] = var.sym.span
        }
    }
}

def RegisterTypes::register_globals(&this, node: &AST) {
    let var = node.u.var_decl
    .o.insert_into_scope_checked(var.sym)
}

def RegisterTypes::add_dbg_method_for_enum(&this, enom: &Enum) {
    let span = enom.sym.span

    // We can't add a print these trivially
    if enom.has_values or enom.sym.is_templated() {
        return
    }

    let func = Function::new()
    func.span = Span::default()
    func.sym = Symbol::new_with_parent(Function, enom.sym.ns, enom.sym, "dbg", span)
    func.sym.u.func = func
    func.return_type = .o.program.get_type_by_name("str", span)
    func.kind = Method
    func.parent_type = enom.type

    let var = Variable::new(enom.type)
    var.sym = Symbol::from_local_variable("this", var, span)

    func.params.push(var)

    let typ = Type::new_resolved(FunctionPtr, span)
    typ.u.func = FunctionType(func, func.params, func.return_type, func.is_variadic)
    func.type = typ

    enom.type.methods.insert("dbg", func)
}

def RegisterTypes::register_namespace(&this, ns: &Namespace) {
    .o.push_scope(ns.scope)
    for struc in ns.structs.iter() {
        .register_struct(ns, struc)
    }
    for enom in ns.enums.iter() {
        .register_enum(ns, enom)
        .add_dbg_method_for_enum(enom)
    }
    for node in ns.constants.iter() {
        .register_globals(node)
    }
    for node in ns.variables.iter() {
        .register_globals(node)
    }
    for it in ns.typedefs.iter() {
        // NOTE: We add a dummy type here, which will be replaced later in the
        // type resolution pass
        .register_alias(it.key, it.value)
    }
    for child in ns.namespaces.iter_values() {
        if child.always_add_to_scope {
            .o.insert_into_scope_checked(child.sym)
        }
        .register_namespace(child)
    }
    .o.pop_scope()
}


def RegisterTypes::register_base_type(&this, base: BaseType) {
    let name = base.str()
    let sym = Symbol::new(TypeDef, ns: null, name, name, name, Span::default())
    let typ = Type::new_resolved(base, Span::default())
    typ.sym = sym
    sym.u.type_def = typ

    // All base types are global
    .o.program.global.scope.items.insert(name, sym)
}

def RegisterTypes::register_alias(&this, name: str, orig: &Type) {
    let sym = Symbol::new(TypeDef, ns: null, name, name, name, Span::default())

    let alias = Type::new_resolved(BaseType::Alias, Span::default())
    alias.name = name
    alias.u.ptr = orig
    alias.sym = sym
    sym.u.type_def = alias

    .o.insert_into_scope_checked(sym, name)
}


def RegisterTypes::register_print_function(&this, name: str) {
    let sym = Symbol::new(Function, ns: null, name, name, name, Span::default())
    let func = Function::new()
    func.sym = sym
    func.sym.u.func = func

    let params = Vector<&Variable>::new()
    let param = Variable::new(.o.program.get_type_by_name("str", Span::default()))
    param.sym = Symbol::from_local_variable("fmt", param, Span::default())
    params.push(param)

    func.params = params
    func.is_variadic = true
    func.is_variadic_format = true

    let typ = Type::new_resolved(FunctionPtr, Span::default())
    typ.u.func = FunctionType(func, params, .o.program.get_type_by_name("void", Span::default()), true)
    func.type = typ

    .o.insert_into_scope_checked(sym, name)
}

def RegisterTypes::register_builtin_types(&this) {
    for let i = 0; i < BaseType::NUM_BASE_TYPES as u32; i += 1 {
        .register_base_type(i as BaseType)
    }

    .o.push_scope(.o.program.global.scope)

    // untyped_ptr
    {
        let base = .o.program.get_base_type(BaseType::Void, Span::default())
        let typ = Type::new_resolved(BaseType::Pointer, Span::default())
        typ.u.ptr = base
        .register_alias("untyped_ptr", typ)
    }

    // str
    {
        let base = .o.program.get_base_type(BaseType::Char, Span::default())
        let typ = Type::new_resolved(BaseType::Pointer, Span::default())
        typ.u.ptr = base
        .register_alias("str", typ)
    }

    // Register built in print-functions
    .register_print_function("print")
    .register_print_function("println")
    .register_print_function("eprint")
    .register_print_function("eprintln")

    .o.pop_scope()
}

struct Finder {
    o: &GenericPass
    sym: &Symbol
    type: &Type
}

def Finder::to(this, name: str, error: bool = true): Finder {
    if not .sym? return this
    let res = .o.find_in_symbol(.sym, name, allow_templated: true)

    if res? {
        match res.type {
            TypeDef => .type = res.u.type_def
            Structure => .type = res.u.struc.type
            Enum => .type = res.u.enom.type
            else => .type = null
        }
    } else if error {
        .o.error(Error::new_note(
            .sym.span, `Could not find {.sym.display}::{name}`,
            "The compiler expects this internally (in RegisterTypes)"
        )).panic()
    }
    .sym = res
    return this
}

[operator "[]"]
def Finder::get(this, name: str): Finder => .to(name, error: true)


[operator "/"]
def Finder::try_get(this, name: str): Finder => .to(name, error: false)


def RegisterTypes::register_cached_types(&this) {
    let finder = Finder(.o, .o.program.global.sym, null)

    let fmt_string_fn = finder["std"]["format"].sym

    let alloc_fn = finder["std"]["mem"]["state"]["alloc_fn"].sym
    let allocator = finder["std"]["mem"]["state"]["allocator"].sym
    assert alloc_fn.type == Variable and alloc_fn.u.var.type.base == FunctionPtr
    assert allocator.type == Variable
    assert alloc_fn.u.var.type.u.func.params.size == 2

    let std_vector = (finder/"std"/"vector"/"Vector").sym
    if std_vector? {
        // Some sanity checks
        assert std_vector.type == Structure
        assert std_vector.is_templated()
    }

    let std_map = (finder/"std"/"compact_map"/"Map").sym
    if std_map? {
        // Some sanity checks
        assert std_map.type == Structure
        assert std_map.is_templated()
    }

    let std_result = (finder/"std"/"result"/"Result").sym
    if std_result? {
        // Some sanity checks to make sure variant / field names
        // in `std/result.oc` are expected; we hardcode these later.
        assert std_result.type == Enum
        assert std_result.is_templated()

        let error = (finder/"std"/"result"/"Result"/"Error").sym
        assert error.type == EnumVariant
        assert error.u.enum_var.specific_fields.size == 1
        assert error.u.enum_var.specific_fields[0].sym.name.eq("err")

        let ok = (finder/"std"/"result"/"Result"/"Ok").sym
        assert ok.type == EnumVariant
        assert ok.u.enum_var.specific_fields.size == 1
        assert ok.u.enum_var.specific_fields[0].sym.name.eq("val")
    }

    let std_option = (finder/"std"/"option"/"Option").sym
    if std_option? {
        // Some sanity checks to make sure variant / field names
        // in `std/option.oc` are expected; we hardcode these later.
        assert std_option.type == Enum
        assert std_option.is_templated()

        let none = (finder/"std"/"option"/"Option"/"None").sym
        assert none.type == EnumVariant
        assert none.u.enum_var.specific_fields.size == 0

        let some = (finder/"std"/"option"/"Option"/"Some").sym
        assert some.type == EnumVariant
        assert some.u.enum_var.specific_fields.size == 1
        assert some.u.enum_var.specific_fields[0].sym.name.eq("val")
    }

    let std_run_test = (finder/"std"/"testing"/"run_test").sym
    if .o.program.is_test_mode {
        assert std_run_test?, "Did not import std::testing"
        assert std_run_test.type == Function
        assert std_run_test.u.func.params.size == 2
    }

    let std_print_test_stats = (finder/"std"/"testing"/"print_test_stats").sym
    if .o.program.is_test_mode {
        assert std_print_test_stats?, "Did not import std::testing"
        assert std_print_test_stats.type == Function
        assert std_print_test_stats.u.func.params.size == 0
    }

    .o.program.cached_symbols = CachedSymbols(
        fmt_string_fn: fmt_string_fn,
        mem_alloc_fn: alloc_fn,
        mem_allocator: allocator,
        std_vector: std_vector,
        std_map: std_map,
        std_result: std_result,
        std_option: std_option,
        std_run_test: std_run_test,
        std_print_test_stats: std_print_test_stats,
    )
}

def RegisterTypes::create_namespace_scopes(&this, ns: &Namespace, parent: &Namespace) {
    let parent_scope: &Scope = if {
        not parent? => null
        // FIXME: A file in a module with `mod.oc` shouldn't get the parent's scope
        parent.is_dir_with_mod => parent.scope.parent
        else => parent.scope
    }
    ns.scope = Scope::new(parent_scope)
    for child in ns.namespaces.iter_values() {
        .create_namespace_scopes(child, ns)
    }
}

def RegisterTypes::run(program: &Program) {
    let pass = RegisterTypes(GenericPass::new(program))
    pass.create_namespace_scopes(program.global, parent: null)
    pass.register_builtin_types()
    pass.register_namespace(program.global)
    if program.include_stdlib {
        pass.register_cached_types()
        program.did_cache_symbols = true
    }
}
