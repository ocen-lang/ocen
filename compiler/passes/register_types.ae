use "@/passes/generic_pass.ae"

// This pass adds all of the new structs / enums / namespaces to the symbol table

struct RegisterTypes {
    o: &GenericPass
}

def RegisterTypes::register_struct(&this, ns: &Namespace, struc: &Structure) {
    let item = struc.sym
    .o.insert_into_scope_checked(item)

    let typ = Type::new_resolved(Structure, struc.sym.span)
    typ.u.struc = struc
    struc.type = typ
    typ.sym = struc.sym
}

def RegisterTypes::register_enum(&this, ns: &Namespace, enum_: &Enum) {
    let item = enum_.sym
    .o.insert_into_scope_checked(item)

    let typ = Type::new_resolved(Enum, enum_.sym.span)
    typ.u.enum_ = enum_
    enum_.type = typ
    typ.sym = enum_.sym

    // FIXME: Make sure enum values are unique
    for let i = 0; i < enum_.fields.size; i += 1 {
        let field = enum_.fields.at(i) as &Variable
        field.type = typ
    }
}

def RegisterTypes::register_namespace(&this, ns: &Namespace) {
    .o.push_scope(ns.scope)
    for let i = 0; i < ns.structs.size; i += 1 {
        let struc = ns.structs.at(i) as &Structure
        .register_struct(ns, struc)
    }
    for let i = 0; i < ns.enums.size; i += 1 {
        let enum_ = ns.enums.at(i) as &Enum
        .register_enum(ns, enum_)
    }
    for let iter = ns.namespaces.iter(); iter.cur?; iter.next() {
        let child = iter.value() as &Namespace
        let name = iter.key()
        if child.always_add_to_scope {
            .o.insert_into_scope_checked(child.sym)
        }
        .register_namespace(child)
    }
    .o.pop_scope()
}


def RegisterTypes::register_base_type(&this, base: BaseType) {
    let name = base.str()
    let sym = Symbol::new(TypeDef, name, name, name, Span::default())
    let typ = Type::new_resolved(base, Span::default())
    typ.sym = sym
    sym.u.type_def = typ

    // All base types are global
    .o.program.global.scope.items.insert(name, sym)
}

def RegisterTypes::register_builtin_types(&this) {
    for let i = 0; i < BaseType::NUM_BASE_TYPES as i32; i += 1 {
        .register_base_type(i as BaseType)
    }
    .o.error_type = Type::new_resolved(BaseType::Error, Span::default())
}


def RegisterTypes::run(program: &Program) {
    let pass = RegisterTypes(GenericPass::new(program))
    pass.register_builtin_types()
    pass.register_namespace(program.global)
}