import std::vector::Vector
import std::span::Span
import std::map::Map
import std::libc::{ calloc, exit }
import @ast::scopes::{ Symbol, Scope }
import @ast::nodes::{ AST, Function, Structure, Enum }
import @types::Type
import @parser::Parser
import @lexer::Lexer
import @errors::{ display_error_messages }

struct Program {
    global: &Namespace

    // This vector stores the order in which the structs should be generated
    // to avoid dependency issues
    ordered_structs: &Vector // Vector<&Structure>

    errors: &Vector // Vector<&Error>
    error_level: u32

    c_includes: &Vector // Vector<str>
    c_flags: &Vector // Vector<str>

    gen_debug_info: bool
    sources: &Map  // Map<str, str>
}

def Program::new(): &Program {
    let prog = calloc(1, sizeof(Program)) as &Program
    prog.global = Namespace::new(null, "")
    prog.ordered_structs = Vector::new()
    prog.global.sym = Symbol::new(Namespace, "", "", "", Span::default())
    prog.global.sym.u.ns = prog.global
    prog.error_level = 1
    prog.errors = Vector::new()
    prog.c_includes = Vector::new()
    prog.c_flags = Vector::new()
    prog.sources = Map::new()
    return prog
}

def Program::exit_with_errors(&this) {
    display_error_messages(.errors, .error_level)
    exit(1)
}

def Program::get_source_text(&this, span: Span): str {
    let start = span.start
    let end = span.end

    let contents = .sources.get(start.filename) as str
    if contents == null return "<unknown source>"

    let len = end.index - start.index
    return contents.substring(start.index, len)
}

def Program::get_function_deep_copy(&this, old: &Function, ns: &Namespace): &Function {
    // FIXME: This is a hack to get around the fact that we can't deep-copy
    // functions yet. We're just going to get the source code of the function
    // and re-parse it. This is obviously not ideal.

    let func_text = .get_source_text(old.span)
    let lexer = Lexer::make(func_text, null)
    lexer.loc = old.span.start

    let tokens = lexer.lex()
    let parser = Parser::make(this, ns)

    parser.tokens = tokens
    parser.curr = 0

    let func = parser.parse_function()
    return func
}

def Program::get_type_deep_copy(&this, old: &Type, ns: &Namespace): &Type {
    // FIXME: This is a hack to get around the fact that we can't deep-copy
    // types yet. We're just going to get the source code of the type
    // and re-parse it. This is obviously not ideal.

    let text = .get_source_text(old.span)
    let lexer = Lexer::make(text, null)
    lexer.loc = old.span.start

    let tokens = lexer.lex()
    let parser = Parser::make(this, ns)

    parser.tokens = tokens
    parser.curr = 0

    let type = parser.parse_type()
    return type
}

struct Namespace {
    parent: &Namespace

    functions: &Vector    // Vector<&Function>
    structs: &Vector      // Vector<&Structure>
    enums: &Vector        // Vector<&Enum>
    constants: &Vector    // Vector<&VarDeclaration>
    variables: &Vector    // Vector<&VarDeclaration>
    imports: &Vector      // Vector<&AST>
    namespaces: &Map      // Map<str, &Namespace>

    sym: &Symbol
    scope: &Scope
    path: str

    // Does this namespace correspond to an actual file with source code? Or is it just an
    // intermediate namespace for a directory?
    is_a_file: bool

    // This is used for any namespaces that need to be added to the scope by default. For instance,
    // the standard library, or user-defined namespaces with the `namespace` keyword.
    always_add_to_scope: bool

    // FIXME: This is hacky, but we want to include everything in `std/prelude.oc` in the
    //        `std` namespace, as opposed to the `std::prelude` namespace. This is done by
    //        treating `std/prelude.oc` as "top-level", which means all it's contents are put
    //        in the same namespace as the containing folder. All other files that are imported
    //        from the same folder will go into a new namespace as per usual.
    is_top_level: bool
}

def Namespace::new(parent: &Namespace, path: str): &Namespace {
    let ns = calloc(1, sizeof(Namespace)) as &Namespace
    ns.parent = parent
    let parent_scope = if parent? then parent.scope else null
    ns.scope = Scope::new(parent_scope)
    ns.functions = Vector::new()
    ns.structs = Vector::new()
    ns.enums = Vector::new()
    ns.constants = Vector::new()
    ns.variables = Vector::new()
    ns.namespaces = Map::new()
    ns.imports = Vector::new()
    ns.path = path
    ns.is_a_file = false

    // if parent? then {
    //     println(`Created namespace: {ns.path} with parent {ns.parent.path}`)
    // } else {
    //     println(`Created namespace: {ns.path} with no parent`)
    // }
    return ns
}

def Namespace::find_importable_symbol(&this, name: str): &Symbol {
    let item = .namespaces.get(name) as &Namespace
    if item? then return item.sym

    for let i = 0; i < .constants.size; i += 1 {
        let node = .constants.at(i) as &AST
        let var = node.u.var_decl.var
        if var.sym.name.eq(name) {
            return var.sym
        }
    }

    for let i = 0; i < .functions.size; i += 1 {
        let func = .functions.at(i) as &Function
        if func.sym.name.eq(name) {
            return func.sym
        }
    }

    for let i = 0; i < .structs.size; i += 1 {
        let struc = .structs.at(i) as &Structure
        if struc.sym.name.eq(name) {
            return struc.sym
        }
    }

    for let i = 0; i < .enums.size; i += 1 {
        let enum_ = .enums.at(i) as &Enum
        if enum_.sym.name.eq(name) {
            return enum_.sym
        }
    }
    return null
}