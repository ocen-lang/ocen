//* Contains the core AST types

import std::vector::Vector
import std::mem
import std::map::Map
import std::span::Span
import @tokens::{ TokenType, Token }
import @ast::scopes::{ Scope, Symbol }
import @ast::program::Namespace
import @ast::operators::{ Operator }
import @types::Type

enum ASTType {
    Assert
    Block
    BoolLiteral
    Break
    Call
    Continue
    Error
    Identifier
    If
    Import
    IntLiteral
    Member
    NSLookup
    OverloadedOperator
    Return
    Yield
    StringLiteral
    SizeOf
    VarDeclaration
    While
    For
    CharLiteral
    FloatLiteral
    FormatStringLiteral
    Cast
    Null
    Match
    Defer
    Specialization
    ArrayLiteral
    CreateClosure

    // Used for heap-allocating the result of an expression
    // @new XYZ   =>  { let a = mem::alloc<typeof(XYZ)>(); *a = XYZ; yield a  }
    CreateNew

    UnaryOp
    BinaryOp
}

struct Variable {
    sym: &Symbol
    type: &Type

    // FIXME: Find a better place for this. Can't be in `Type` since
    //        We use interned types in the typecheker...
    //* Is this atomic?
    is_atomic: bool

    //* Only for function default arguments
    default_value: &AST

    //* Original parsed type, for keeping track of locations
    parsed_type: &Type
}

def Variable::new(type: &Type): &Variable {
    let var = mem::alloc<Variable>()
    var.type = type
    var.parsed_type = type
    return var
}

struct Structure {
    sym: &Symbol
    fields: &Vector<&Variable>
    type: &Type
    is_union: bool
    span: Span

    format_spec: str
    format_args: str
}

def Structure::new(): &Structure {
    let struc = mem::alloc<Structure>()
    struc.fields = Vector<&Variable>::new()
    return struc
}

def Structure::get_field(&this, name: str): &Variable {
    for field in .fields.iter() {
        if field.sym.name.eq(name) {
            return field
        }
    }
    return null
}

// Enum implementation miscellaneous todos:
// TODO: Struct-like variants with named fields (currently only tuple-like)
// TODO: In codegen, store match expression in separate variable to avoid side effects in multiple branches
// TODO: Potentially(?) replace tuple-like completely with struct-like variants. Makes match expressions more readable
// TODO: Find some syntax to be able to construct variants without fully specifying all (shared) fields (for eg: for Node)
struct Enum {
    sym: &Symbol
    span: Span
    shared_fields: &Vector<&Variable>
    variants: &Vector<&EnumVariant>
    type: &Type

    // To quickly check if this is a "normal" enum with no values stored
    has_values: bool
}

def Enum::get_variant(&this, name: str): &EnumVariant {
    for variant in .variants.iter() {
        if variant.sym.name.eq(name) return variant
    }
    return null
}

def Enum::get_shared_field(&this, name: str): &Variable {
    for field in .shared_fields.iter() {
        if field.sym.name.eq(name) return field
    }
    return null
}

def Enum::new(span: Span): &Enum {
    let enom = mem::alloc<Enum>()
    enom.variants = Vector<&EnumVariant>::new()
    enom.shared_fields = Vector<&Variable>::new()
    enom.span = span
    return enom
}

struct EnumVariant {
    sym: &Symbol

    // TODO: Named fields? For now variables just have an empty name / symbol
    specific_fields: &Vector<&Variable>
    parent: &Enum

    span: Span
}

//! Includes both shared and specific fields
def EnumVariant::num_fields(&this): u32 => .parent.shared_fields.size + .specific_fields.size

//! Returns the field at the given index, (including shared fields)
def EnumVariant::get_field_by_idx(&this, idx: u32): &Variable {
    if idx < .parent.shared_fields.size {
        return .parent.shared_fields[idx]
    } else {
        return .specific_fields[idx - .parent.shared_fields.size]
    }
}

//! Returns the field by name
def EnumVariant::get_specific_field(&this, name: str): &Variable {
    for field in .specific_fields.iter() {
        if field.sym.name.eq(name) return field
    }
    return null
}

def EnumVariant::new(span: Span): &EnumVariant {
    let variant = mem::alloc<EnumVariant>()
    variant.specific_fields = Vector<&Variable>::new()
    return variant
}

// Calling this FunctionKind instead of FunctionType to
// avoid confusion with the `struct FunctionType` used in &Type
enum FunctionKind {
    Normal
    Method
    Closure
}


// FIXME: Can we do something about `alloca()` in codegen?
// FIXME: Codegen is super hacky, need to clean up and fix:
// FIXME: Check to see if any existing fields clash with implicit closure fields, and throw an error/rename
// FIXME: Checking lifetimes: closures can't outlive their parent function
// FIXME: Allow nested closures (in resolve_scoped_identifier) we only ever look up one level
// FIXME: Almost ALL the details are hardcoded in codegen. Make type-checker aware of extra implicit fields/params etc.
// FIXME:   - Essentially, "unroll" the closures into structs+fields at type-checker level
// FIXME: Allow passing a normal function pointer to a closure (just wrap it in Closure struct with empty context)
struct Function {
    kind: FunctionKind

    sym: &Symbol
    params: &Vector<&Variable>
    //! (Eventually) resolved return type of the function
    return_type: &Type
    body: &AST
    is_arrow: bool

    scope: &Scope
    closure_scope: &Scope
    closed_vars: &Map<str, &Symbol>

    span: Span
    //! Used for LSP, to know span of (unresolved) return type
    parsed_return_type: &Type
    //! Store full AST for methods `Foo::bar()`
    name_ast: &AST

    type: &Type
    checked: bool

    is_variadic: bool
    is_variadic_format: bool
    operator_overloads: &Vector<Operator>

    exits: bool
    is_static: bool
    parent_type: &Type
}

def Function::new(): &Function {
    let func = mem::alloc<Function>()
    func.params = Vector<&Variable>::new()
    return func
}

//! Checks if this is an instance of a template function, or if it's
//! a method of an instance of a templated struct.
def Function::is_template_instance(&this): bool {
    if .type? and .type.template_instance? return true
    if .parent_type? and .parent_type.template_instance? return true
    return false
}

struct Block {
    statements: &Vector<&AST>
    scope: &Scope
    final_stmt: &AST
}

struct Identifier {
    name: str
    var: &Variable
    is_function: bool
    func: &Function
}

struct Argument {
    expr: &AST
    label: str
    label_span: Span
}

def Argument::new(expr: &AST, label_token: &Token = null): &Argument {
    let arg = mem::alloc<Argument>()
    arg.expr = expr
    if label_token? then arg.label = label_token.text
    if label_token? then arg.label_span = label_token.span
    return arg
}

enum CallType {
    Normal
    Closure
    StructConstructor
    EnumConstructor
}

struct FuncCall {
    callee: &AST
    args: &Vector<&Argument>
    func: &Function

    open_paren_span: Span
    close_paren_span: Span

    call_type: CallType
    is_function_pointer: bool
}

enum ImportPartType {
    Single
    Multiple
    Wildcard
}

struct ImportPartSingle {
    name: str
    name_span: Span
    alias: str
    alias_span: Span
}

struct ImportPartMultiple {
    open_curly_span: Span
    close_curly_span: Span
    paths: &Vector<&Vector<&ImportPart>>
}

union ImportPartUnion {
    single: ImportPartSingle
    multiple: ImportPartMultiple
}

struct ImportPart {
    type: ImportPartType
    u: ImportPartUnion
    span: Span
    resolved_symbol: &Symbol
}

def ImportPart::new(type: ImportPartType, span: Span): &ImportPart {
    let part = mem::alloc<ImportPart>()
    part.type = type
    part.span = span
    return part
}

enum ImportType {
    //* Import from a global / library: `import foo`
    GlobalNamespace
    //* Import from a project namespace: `import @foo`
    ProjectNamespace
    //* Import from current / parent dir: `import ..foo`
    ParentNamespace
    //* Import from a local namespace: `import ::foo`
    CurrentScope
}

struct Import {
    parts: &Vector<&ImportPart>

    type: ImportType
    // For FromParentNamespace imports, we might have something like `import ..foo`, in which
    // case we need to know how namespace levels to go up.
    parent_count: u32
    export: bool

    // Root symbol of the import
    root_sym: &Symbol
}

struct NumLiteral {
    text: str
    suffix: &Type
}

struct Binary {
    op: Operator
    lhs: &AST
    rhs: &AST
    op_span: Span
}

struct Unary {
    op: Operator
    expr: &AST
    op_span: Span
}

struct NSLookup {
    lhs: &AST
    rhs_name: str
    rhs_span: Span
}

struct Member {
    lhs: &AST
    rhs_name: str
    rhs_span: Span
    dot_shorthand: bool
    is_pointer: bool
}

struct Assertion {
    expr: &AST
    msg: &AST
}

struct IfBranch {
    cond: &AST
    body: &AST
}

struct IfStatement {
    branches: &Vector<IfBranch>
    els: &AST

    //! Span of the `else` token if we have an else branch
    //! (for error messages)
    els_span: Span

    //! Span of the `if` token
    if_span: Span
}

struct Loop {
    init: &AST
    cond: &AST
    step: &AST
    body: &AST
}

struct Cast {
    lhs: &AST
    to: &Type
    parsed_to: &Type
}

struct FormatString {
    parts: &Vector<str>
    specs: &Vector<str>
    exprs: &Vector<&AST>
}

struct MatchCondArg {
    var: &Variable
    is_shared: bool = false
}

struct MatchCond {
    expr: &AST
    cmp_fn: &Function
    // For value enums
    args: &Vector<&MatchCondArg>
}

def MatchCond::new(cond: &AST, args: &Vector<&MatchCondArg>, cmp_fn: &Function = null): &MatchCond {
    let mcond = mem::alloc<MatchCond>()
    mcond.expr = cond
    mcond.args = args
    mcond.cmp_fn = cmp_fn
    return mcond
}

struct MatchCase {
    conds: &Vector<&MatchCond>
    body: &AST
}

struct Match {
    expr: &AST
    cases: &Vector<MatchCase>
    defolt: &AST
    is_custom_match: bool

    //! Span of `default` token if we have a default case
    defolt_span: Span
    //! Span of `match` token
    match_span: Span
}

struct Specialization {
    base: &AST
    parsed_template_args: &Vector<&Type>  // For error messages
    template_args: &Vector<&Type>
}

struct ArrayLiteral {
    elements: &Vector<&AST>
}

struct Return {
    expr: &AST
    return_span: Span
}

union ASTUnion {
    assertion: Assertion
    binary: Binary
    block: Block
    bool_literal: bool
    call: FuncCall
    cast: Cast
    ident: Identifier
    if_stmt: IfStatement
    import_path: Import
    lookup: NSLookup
    loop: Loop
    member: Member
    num_literal: NumLiteral
    string_literal: str
    char_literal: str
    unary: Unary
    operator_span: Span
    var_decl: &Variable
    fmt_str: FormatString
    size_of_type: &Type
    match_stmt: Match
    spec: Specialization
    array_literal: ArrayLiteral
    child: &AST
    ret: Return
    closure: &Function
}

struct AST {
    type: ASTType
    span: Span
    u: ASTUnion

    // Resolved by type checker
    etype: &Type
    hint: &Type  // For LSP
    resolved_symbol: &Symbol
    returns: bool
}

def AST::new(type: ASTType, span: Span): &AST {
    let ast = mem::alloc<AST>()
    ast.type = type
    ast.span = span
    return ast
}

def AST::new_unop(op: Operator, span: Span, expr: &AST): &AST {
    let ast = AST::new(UnaryOp, span)
    ast.u.unary.op = op
    ast.u.unary.expr = expr
    return ast
}

def AST::new_binop(op: Operator, lhs: &AST, rhs: &AST, op_span: Span): &AST {
    let span = lhs.span.join(rhs.span)
    let ast = AST::new(BinaryOp, span)
    ast.u.binary.op = op
    ast.u.binary.lhs = lhs
    ast.u.binary.rhs = rhs
    ast.u.binary.op_span = op_span
    return ast
}

//! Returns the span we want to display in the LSP for this node
def AST::display_span(&this): Span => match .type {
    Match => .u.match_stmt.match_span
    If => .u.if_stmt.if_span
    else => .span
}

def AST::is_identifier(&this): bool => match .type {
    Identifier => true
    NSLookup => true
    else => false
}

def AST::symbol(&this): &Symbol => .resolved_symbol

def AST::is_lvalue(&this): bool => match .type {
    Identifier => not .u.ident.is_function
    Member => true
    UnaryOp => .u.unary.op == Dereference
    BinaryOp => .u.binary.op == Index
    NSLookup => {
        let sym = .resolved_symbol
        return sym? and sym.type == Variable
    }
    else => false
}
