import std::shift_args
import std::fs
import std::huffman

enum Mode {
    Compress
    Decompress
    None
}

def usage(code: i32, full: bool) {
    println("Usage:")
    println("   ./huffman <-c|-d> -i <path> -o <path>")
    if not full then std::exit(code)

    println("--------------------------------------------------------")
    println("Compile Options:")
    println("    -i path        Input path")
    println("    -o path        Output path")
    println("    -c             Compress")
    println("    -d             Decompress")
    println("    -h             Display this information")
    std::exit(code)
}

let mode: Mode = None
let input: str = "/dev/stdin"
let output: str = "/dev/stdout"


def parse_args(argc: &i32, argv: &&str) {
    while *argc > 0 {
        let arg = shift_args(argc, argv)
        match arg {
            "-h" | "--help" => usage(code: 0, true)
            "-i" | "--input" => input = shift_args(argc, argv)
            "-o" | "--output" => output = shift_args(argc, argv)
            "-c" | "--compress" => mode = Compress
            "-d" | "--decompress" => mode = Decompress
            else => {
                println("Unknown option/argument: '%s'", arg)
                usage(code: 1, true)
            }
        }
    }

    if mode == None {
        println("Mode was not selected. Please choose -c or -d")
        usage(code: 1, true)
    }
}

def main(argc: i32, argv: &str) {
    shift_args(&argc, &argv)
    parse_args(&argc, &argv)
    let file = fs::read_file_inc(input)
    let res = match mode {
        Compress => huffman::compress(&file)
        Decompress => huffman::decompress(&file)
        None => std::panic("unreachable")
    }
    fs::write_file(output, res)
}